### Generated by rprotoc. DO NOT EDIT!
### <proto file: intermediate.proto>
# package IronAutomata.Intermediate.PB;
#
# message Edge
# {
#     required uint64 target    = 1;
#     optional bytes  values_bm = 2;
#     optional bytes  values    = 3;
#     optional bool   advance   = 4;
# };
#
# message Node
# {
#     required uint64 id                 = 1;
#     optional uint64 first_output       = 2;
#     repeated Edge   edges              = 3;
#     optional uint64 default_target     = 4;
#     optional bool   advance_on_default = 5;
# };
#
# message Output
# {
#     required uint64 id      = 1;
#     required bytes  content = 2;
#     optional uint64 next    = 3;
# };
#
# message Graph
# {
#     optional bool no_advance_no_output = 1;
# };
#
# message Chunk
# {
#     optional Graph  graph   = 1;
#     repeated Node   nodes   = 2;
#     repeated Output outputs = 3;
# };

require 'protobuf/message/message'
require 'protobuf/message/enum'
require 'protobuf/message/service'
require 'protobuf/message/extend'

module IronAutomata
  module Intermediate
    module PB
      class Edge < ::Protobuf::Message
        defined_in __FILE__
        required :uint64, :target, 1
        optional :bytes, :values_bm, 2
        optional :bytes, :values, 3
        optional :bool, :advance, 4
      end
      class Node < ::Protobuf::Message
        defined_in __FILE__
        required :uint64, :id, 1
        optional :uint64, :first_output, 2
        repeated :Edge, :edges, 3
        optional :uint64, :default_target, 4
        optional :bool, :advance_on_default, 5
      end
      class Output < ::Protobuf::Message
        defined_in __FILE__
        required :uint64, :id, 1
        required :bytes, :content, 2
        optional :uint64, :next, 3
      end
      class Graph < ::Protobuf::Message
        defined_in __FILE__
        optional :bool, :no_advance_no_output, 1
      end
      class Chunk < ::Protobuf::Message
        defined_in __FILE__
        optional :Graph, :graph, 1
        repeated :Node, :nodes, 2
        repeated :Output, :outputs, 3
      end
    end
  end
end