<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:svg="http://www.w3.org/2000/svg" xmlns:m="http://www.w3.org/1998/Math/MathML"
    xmlns:html="http://www.w3.org/1999/xhtml" xml:id="rule-reference">
    <title>Rule Reference</title>
    <para>...</para>
    <section>
        <title>Data Fields</title>
        <para>...</para>
        <section>
            <title>ARGS</title>
            <para><emphasis role="bold">Description:</emphasis> All request parameters combined and
                normalized.</para>
            <para><emphasis role="bold">Type:</emphasis> Collection</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction
                    (<literal>REQUEST_HEADERS</literal>, <literal>REQUEST_BODY</literal>)</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.2</para>
            <para>
                <note>
                    <para>The <literal>ARGS</literal> collection is currently the same as specifying
                            <literal>REQUEST_URL_PARAMS REQUEST_BODY_PARAMS</literal>, but this will
                        change in later releases to include normalization based on parser personalities.
                        If you do not want normalization, then use <literal>REQUEST_URL_PARAMS
                            REQUEST_BODY_PARAMS</literal>.</para>
                </note>
            </para>
        </section>
        <section>
            <title>AUTH_PASSWORD</title>
            <para><emphasis role="bold">Description:</emphasis> Basic authentication password.</para>
            <para><emphasis role="bold">Type:</emphasis> String</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> Not implemented yet</para>
        </section>
        <section>
            <title>AUTH_TYPE</title>
            <para><emphasis role="bold">Description:</emphasis> Indicator of the authentication method
                used.</para>
            <para><emphasis role="bold">Type:</emphasis> Collection</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> Not implemented yet</para>
            <para>This field contains the first token extracted from the
                    <literal>Authorization</literal> request header. Typical values are:
                    <literal>Basic</literal>, <literal>Digest</literal>, and <literal>NTLM</literal>.
            </para>
        </section>
        <section>
            <title>AUTH_USERNAME</title>
            <para><emphasis role="bold">Description:</emphasis> Basic or Digest authentication
                username.</para>
            <para><emphasis role="bold">Type:</emphasis> String</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> Not implemented yet</para>
        </section>
        <section>
            <title>CAPTURE</title>
            <para><emphasis role="bold">Description:</emphasis> Transaction collection.</para>
            <para><emphasis role="bold">Type:</emphasis> Collection</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.4</para>
            <para>This collection contains information for the transaction. Currently captured data from
                operators is stored here in keys "0"-"9".<note>
                    <para>The captures were previously stored in the generic <literal>TX</literal>
                        collection, but moved to its own collection in version 0.4.</para>
                </note></para>
        </section>
        <section>
            <title>FIELD</title>
            <para><emphasis role="bold">Description:</emphasis> An alias to the current field
                being inspected.</para>
            <para><emphasis role="bold">Type:</emphasis> Variable (same type as the aliased
                field)</para>
            <para><emphasis role="bold">Scope:</emphasis> Rule</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.5</para>
            <para>This field is useful only in field expansions within actions when you
                must have the original value of the field being inspected. For example:</para>
            <programlisting># Log the field value with an event
    Rule ARGS @contains attack_string id:123 phase:REQUEST logdata:%{FIELD} event

    # Create a collection matching a pattern for later use
    Rule REQUEST_HEADERS @rx pattern1 id:124 phase:REQUEST_HEADER setvar:NEW_COL:%{FIELD_NAME}=%{FIELD}
    Rule ARGS @rx pattern2 id:125 phase:REQUEST setvar:NEW_COL:%{FIELD_NAME}=%{FIELD}
    ...
    # Then perform further matches on the new collection in another phase, which
    # is not possible via chaining.
    Rule NEW_COL @rx some_other_patt id:126 phase:REQUEST "msg:Some msg" event block</programlisting>
        </section>
        <section>
            <title>FIELD_NAME</title>
            <para><emphasis role="bold">Description:</emphasis> An alias to the current field
                name being inspected, not including the collection name if it is a sub-field
                in a collection.</para>
            <para><emphasis role="bold">Type:</emphasis> Variable (same type as the aliased
                field)</para>
            <para><emphasis role="bold">Scope:</emphasis> Rule</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.5</para>
            <para>This field is useful only in field expansions within actions when you
                must have the name of the field being inspected. The collection name is not
                prepended, so if <literal>ARGS:foo</literal> is being inspected, the value
                will be <literal>foo</literal>, not <literal>ARGS:foo</literal>. If you
                want the full name with the collection prepended, then use
                <literal>FIELD_NAME_FULL</literal>.</para>
        </section>
        <section>
            <title>FIELD_NAME_FULL</title>
            <para><emphasis role="bold">Description:</emphasis> An alias to the current field
                name being inspected, including the collection name if it is a sub-field
                in a collection.</para>
            <para><emphasis role="bold">Type:</emphasis> Variable (same type as the aliased
                field)</para>
            <para><emphasis role="bold">Scope:</emphasis> Rule</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.5</para>
            <para>This field is useful only in field expansions within actions when you
                must have the full name of the field being inspected. See <literal>FIELD_NAME</literal>
                .</para>
        </section>
        <section>
            <title>GEOIP</title>
            <para><emphasis role="bold">Description:</emphasis> If the <emphasis>geoip</emphasis> module
                is loaded, then a lookup will be performed on the remote (client) address and the
                results placed in this collection.</para>
            <para><emphasis role="bold">Type:</emphasis> Collection</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction</para>
            <para><emphasis role="bold">Module:</emphasis> geoip</para>
            <para><emphasis role="bold">Version:</emphasis> 0.3</para>
            <note><para>The address used during lookup is the same as that stored in the
                        <literal>REMOTE_ADDR</literal> field, which may be modified from the actual
                    connection (TCP) level address by the <literal>user_agent</literal> module.</para></note>
            <para>Sub-Fields (not all are available prior to GeoIP v1.4.6):
            <itemizedlist>
                <listitem>
                    <para><emphasis role="bold">latitude:</emphasis> Numeric latitude rounded to nearest integral value (no floats yet).</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">longitude:</emphasis> Numeric longitude rounded to
                            nearest integral value (no floats yet).</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">area_code:</emphasis> Numeric area code (US
                            only).</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">charset:</emphasis> Numeric character set code.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">country_code:</emphasis> Two character country
                            code.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">country_code3:</emphasis> Three character country
                            code.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">country_name:</emphasis> String country name.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">region:</emphasis> String region name.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">city:</emphasis> String city name.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">postal_code:</emphasis> String postal code.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">continent_code:</emphasis> String continent code.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">accuracy_radius:</emphasis> Numeric accuracy radius
                            (v1.4.6+).</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">metro_code:</emphasis> Numeric metro code
                            (v1.4.6+).</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">country_conf:</emphasis> String country confidence
                            (v1.4.6+).</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">region_conf:</emphasis> String region confidence
                            (v1.4.6+).</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">city_conf:</emphasis> String city confidence
                            (v1.4.6+).</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">postal_conf:</emphasis> String postal code confidence
                            (v1.4.6+).</para>
                </listitem>
            </itemizedlist>
            </para>    
        </section>
        <section>
            <title>HTP_REQUEST_FLAGS</title>
            <para><emphasis role="bold">Description:</emphasis> Collection of LibHTP request parsing
                flags.</para>
            <para><emphasis role="bold">Type:</emphasis> Collection</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction</para>
            <para><emphasis role="bold">Module:</emphasis> htp</para>
            <para><emphasis role="bold">Version:</emphasis> 0.3</para>
            <para>The LibHTP parser will set various flags while parsing. This is a collection of those
                flags for request parsing. The following flags may be set:</para>
            <itemizedlist>
                <listitem>
                    <para><emphasis role="bold">AMBIGUOUS_HOST:</emphasis> The host was specified in
                        both the URI and in the Host header, but they do not match.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">FIELD_INVALID:</emphasis> An invalid field was
                        sent.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">FIELD_LONG:</emphasis> A field length was longer
                        than allowed.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">FIELD_UNPARSEABLE:</emphasis> An unparseable field
                        was given.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">HOST_MISSING:</emphasis> The host was missing from a
                        request in which it is normally sent.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">INVALID_CHUNKING:</emphasis> Invalid chunking was
                        used.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">INVALID_FOLDING:</emphasis> Invalid header folding
                        was used.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">MULTI_PACKET_HEAD:</emphasis> The header was sent in
                        more than one packet (buffer).</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">PATH_ENCODED_NUL:</emphasis> A NUL (zero) byte was
                        sent, encoded, in the path.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">PATH_ENCODED_SEPARATOR:</emphasis> An encoded path
                        separator was sent in the path.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">PATH_FULLWIDTH_EVASION:</emphasis> A full width
                        character was used in the path.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">PATH_INVALID_ENCODING:</emphasis> Invalid encoding
                        was used in the path.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">PATH_OVERLONG_U:</emphasis> An overlong unicode
                        encoding was used in the path.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">PATH_UTF8_INVALID:</emphasis> An invalid UTF-8
                        encoding was used in the path.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">PATH_UTF8_OVERLONG:</emphasis> An overlong UTF-8
                        encoding was used in the path.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">PATH_UTF8_VALID:</emphasis> A UTF-8 character was
                        used in the path.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">REQUEST_SMUGGLING:</emphasis> A HTTP smuggling
                        attack was detected.</para>
                </listitem>
            </itemizedlist>
        </section>
        <section>
            <title>HTP_RESPONSE_FLAGS</title>
            <para><emphasis role="bold">Description:</emphasis> Collection of LibHTP response parsing
                flags.</para>
            <para><emphasis role="bold">Type:</emphasis> Collection</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction</para>
            <para><emphasis role="bold">Module:</emphasis> htp</para>
            <para><emphasis role="bold">Version:</emphasis> 0.3</para>
            <para>The LibHTP parser will set various flags while parsing. This is a collection of those
                flags for response parsing. The following flags may be set:</para>
            
            <itemizedlist>
                <listitem>
                    <para><emphasis role="bold">FIELD_INVALID:</emphasis> An invalid field was
                        sent.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">FIELD_LONG:</emphasis> A field length was longer
                        than allowed.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">FIELD_UNPARSEABLE:</emphasis> An unparseable field
                        was given.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">INVALID_CHUNKING:</emphasis> Invalid chunking was
                        used.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">INVALID_FOLDING:</emphasis> Invalid header folding
                        was used.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">MULTI_PACKET_HEAD:</emphasis> The header was sent in
                        more than one packet (buffer).</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">STATUS_LINE_INVALID:</emphasis> An invalid HTTP
                        status code was sent.</para>
                </listitem>
            </itemizedlist>
        </section>
        <section>
            <title>LAST_MATCHED</title>
            <para><emphasis role="bold">Description:</emphasis> An alias to the last matching
                field.</para>
            <para><emphasis role="bold">Type:</emphasis> Variable (same type as the aliased
                field)</para>
            <para><emphasis role="bold">Scope:</emphasis> Rule</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> Not implemented yet</para>
            <para>This field is useful in a rule that is inspecting several fields, and you need to
                which of the fields matched. For example:</para>
            <programlisting># Further inspect a matching field
    Rule ARGS @contains attack_string chain
        Rule LAST_MATCHED "@rx some.*complex.*patt.*that.*may.*be.*expensive" block

    # Log the value of the field that matched
    Rule ARGS @rx pattern \
        "msg:'Test matched',logdata:%{LAST_MATCHED}"</programlisting>
        </section>
        <section>
            <title>REMOTE_ADDR</title>
            <para><emphasis role="bold">Description:</emphasis> Remote (client) IP address, extracted from the TCP connection. Can be in IPv4 or IPv6 format.</para>
            <para><emphasis role="bold">Type:</emphasis> String</para>
            <para><emphasis role="bold">Scope:</emphasis> Connection</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.2</para>
            <note><para>If the <literal>user_agent</literal> module is also loaded, then the client address will be
                    corrected using any available proxy headers (currently
                        <literal>X-Forwarded-For</literal>).</para></note>
        </section>
        <section>
            <title>REMOTE_PORT</title>
            <para><emphasis role="bold">Description:</emphasis> Remote (client) port, extracted from the TCP connection.</para>
            <para><emphasis role="bold">Type:</emphasis> Numeric</para>
            <para><emphasis role="bold">Scope:</emphasis> Connection</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.2</para>
        </section>
        <section>
            <title>REQUEST_BODY</title>
            <para><emphasis role="bold">Description:</emphasis> Request body data.</para>
            <para><emphasis role="bold">Type:</emphasis> Byte string</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> Not implemented yet</para>
            <note>
                <para>This field may not be supported by all operators (noteably <literal>@rx</literal>)
                    as it may not be a contiguous buffer, but rather spread across multiple buffers. In
                    most cases, you will want to use the <literal>StreamInspect</literal> directive with
                    the <literal>@pm</literal>, <literal>@pmf</literal> or <literal>@dfa</literal>
                    operator.</para>
            </note>
        </section>
        <section>
            <title>REQUEST_BODY_PARAMS</title>
            <para><emphasis role="bold">Description:</emphasis> Request parameters transported in
                request body.</para>
            <para><emphasis role="bold">Type:</emphasis> String</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.4</para>
        </section>
        <section>
            <title>REQUEST_CONTENT_TYPE</title>
            <para><emphasis role="bold">Description:</emphasis> Contains the normalized request content
                type.</para>
            <para><emphasis role="bold">Type:</emphasis> String</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction
                    (<literal>REQUEST_HEADERS</literal>)</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> Not implemented yet</para>
            <para>Request content type is constructed from the request <literal>Content-Type</literal>
                header. The value is first converted to contain only the content type (and exclude any
                character encoding information), then converted to lowercase.</para>
        </section>
        <section>
            <title>REQUEST_COOKIES</title>
            <para><emphasis role="bold">Description:</emphasis> Collection of request cookies
                (name/value pairs).</para>
            <para><emphasis role="bold">Type:</emphasis> Collection</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction
                    (<literal>REQUEST_HEADERS</literal>)</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.2</para>
        </section>
        <section>
            <title>REQUEST_FILENAME</title>
            <para><emphasis role="bold">Description:</emphasis> Request filename, extracted from request
                URI and normalized according to the current personality.</para>
            <para><emphasis role="bold">Type:</emphasis> String</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> Not implemented yet</para>
            <para>Normalization algorithm, with all "features" enabled, is as follows:</para>
            <orderedlist>
                <listitem>
                    <para>Decode URL-encoded characters (both <literal>%HH</literal> and
                            <literal>%uHHHH</literal> formats), convert to lowercase, compress
                        separators, convert backslashes, and terminate NUL.</para>
                </listitem>
                <listitem>
                    <para>Convert UTF-8 to single-byte stream using best-fit mapping</para>
                </listitem>
                <listitem>
                    <para>Perform RFC 3986 normalization</para>
                </listitem>
            </orderedlist>
        </section>
        <section>
            <title>REQUEST_HEADERS</title>
            <para><emphasis role="bold">Description:</emphasis> Collection of request headers
                (name/value pairs).</para>
            <para><emphasis role="bold">Type:</emphasis> Collection</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction
                    (<literal>REQUEST_HEADERS</literal>)</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.2</para>
        </section>
        <section>
            <title>REQUEST_HOST</title>
            <para><emphasis role="bold">Description:</emphasis> Request hostname information, extracted from the request and normalized.</para>
            <para><emphasis role="bold">Type:</emphasis> String</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction
                    (<literal>REQUEST_HEADERS</literal>)</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.2</para>
            <para>The following rules apply:</para>
            <orderedlist>
                <listitem>
                    <para>Use the hostname information if provided on the request line</para>
                </listitem>
                <listitem>
                    <para>Alternatively, look up the HTTP <literal>Host</literal> request header</para>
                </listitem>
                <listitem>
                    <para>If the hostname information is provided in both locations, the information in
                        the HTTP <literal>Host</literal> request header is ignored</para>
                </listitem>
            </orderedlist>
            <para>Normalization [TODO What RFC should we refer to?]:</para>
            <orderedlist>
                <listitem>
                    <para>Lowercase</para>
                </listitem>
                <listitem>
                    <para>Remove trailing dot [TODO What dot?]</para>
                </listitem>
            <listitem>
                <para>[TODO Remove port?]</para>
            </listitem>
            </orderedlist>
        </section>
        <section>
            <title>REQUEST_LINE</title>
            <para><emphasis role="bold">Description:</emphasis> Full, raw, request line.</para>
            <para><emphasis role="bold">Type:</emphasis> String</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.3</para>
            <para>Example:
                <programlisting>GET /path/to/page?a=5&amp;q=This+is+a+test. HTTP/1.1</programlisting>
            </para>
        </section>
        <section>
            <title>REQUEST_METHOD</title>
            <para><emphasis role="bold">Description:</emphasis> Request method.</para>
            <para><emphasis role="bold">Type:</emphasis> String</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.3</para>
            <para>This field contains the HTTP method used for the request.</para>
            <para>Example: <literal>GET</literal></para>
        </section>
        <section>
            <title>REQUEST_PROTOCOL</title>
            <para><emphasis role="bold">Description:</emphasis> Request protocol name and
                version.</para>
            <para><emphasis role="bold">Type:</emphasis> String</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> o.3</para>
            <para>This field contains the HTTP protocol name and version, as specified on the request
                line. Transactions that do not specify the protocol (e.g., HTTP prior to 1.0) will have
                an empty string value.</para>
        </section>
        <section>
            <title>REQUEST_URI</title>
            <para><emphasis role="bold">Description:</emphasis> Request URI, extracted from request and normalized according to the current personality (see <literal>REQUEST_FILENAME</literal> for more details).</para>
            <para><emphasis role="bold">Type:</emphasis> String</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.2</para>
            <para>Default normalization:</para>
            <orderedlist>
                <listitem>
                    <para>RFC normalization</para>
                </listitem>
                <listitem>
                    <para>Convert to lowercase</para>
                </listitem>
                <listitem>
                    <para>Reduce consecutive forward slashes to a single character</para>
                </listitem>
            </orderedlist>
            <para>All normalization options:</para>
            <itemizedlist>
                <listitem>
                    <para>RFC normalization</para>
                </listitem>
                <listitem>
                    <para>Convert to lowercase</para>
                </listitem>
                <listitem>
                    <para>Convert \ characters to /</para>
                </listitem>
                <listitem>
                    <para>Reduce consecutive forward slashes to a single character</para>
                </listitem>
            </itemizedlist>
        </section>
        <section>
            <title>REQUEST_URI_FRAGMENT</title>
            <para><emphasis role="bold">Description:</emphasis> Parsed fragment portion of the URI
                within the request line.</para>
            <para><emphasis role="bold">Type:</emphasis> String</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.3</para>
        </section>
        <section>
            <title>REQUEST_URI_HOST</title>
            <para><emphasis role="bold">Description:</emphasis> Parsed host portion of the URI within
                the request line.</para>
            <para><emphasis role="bold">Type:</emphasis> String</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.3</para>
            <para>This is the hostname specified in the URI. Note that this may be different from the
                normalized host, which is in <literal>REQUEST_HOST</literal>.</para>
        </section>
        <section>
            <title>REQUEST_URI_PARAMS</title>
            <para><emphasis role="bold">Description:</emphasis> Request parameters transported in query
                string.</para>
            <para><emphasis role="bold">Type:</emphasis> Collection</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction
                    (<literal>REQUEST_HEADERS</literal>)</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.2</para>
        </section>
        <section>
            <title>REQUEST_URI_PASSWORD</title>
            <para><emphasis role="bold">Description:</emphasis> Parsed password portion of the URI
                within the request line.</para>
            <para><emphasis role="bold">Type:</emphasis> String</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.3</para>
        </section>
        <section>
            <title>REQUEST_URI_PATH</title>
            <para><emphasis role="bold">Description:</emphasis> Parsed path portion of the URI within
                the request line.</para>
            <para><emphasis role="bold">Type:</emphasis> String</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.3</para>
        </section>
        <section>
            <title>REQUEST_URI_PORT</title>
            <para><emphasis role="bold">Description:</emphasis> Parsed port portion of the URI within
                the request line.</para>
            <para><emphasis role="bold">Type:</emphasis> String</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.3</para>
        </section>
        <section>
            <title>REQUEST_URI_RAW</title>
            <para><emphasis role="bold">Description:</emphasis> Raw, unnormalized, request URI.</para>
            <para><emphasis role="bold">Type:</emphasis> String</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.2</para>
        </section>
        <section>
            <title>REQUEST_URI_SCHEME</title>
            <para><emphasis role="bold">Description:</emphasis> Parsed scheme portion of the URI within
                the request line.</para>
            <para><emphasis role="bold">Type:</emphasis> String</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.3</para>
        </section>
        <section>
            <title>REQUEST_URI_QUERY</title>
            <para><emphasis role="bold">Description:</emphasis> Parsed query portion of the URI within
                the request line.</para>
            <para><emphasis role="bold">Type:</emphasis> String</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.3</para>
        </section>
        <section>
            <title>REQUEST_URI_USERNAME</title>
            <para><emphasis role="bold">Description:</emphasis> Parsed username portion of the URI
                within the request line.</para>
            <para><emphasis role="bold">Type:</emphasis> String</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.3</para>
        </section>
        <section>
            <title>RESPONSE_BODY</title>
            <para><emphasis role="bold">Description:</emphasis> Response body data up to any imposed
                limits.</para>
            <para><emphasis role="bold">Type:</emphasis> Scalar</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.3</para>
            <note>
                <para>This field may not be supported by all operators (noteably <literal>@rx</literal>)
                    as it may not be a contiguous buffer, but rather spread across multiple buffers. In
                    most cases, you will want to use the <literal>StreamInspect</literal> directive with
                    the <literal>@pm</literal>, <literal>@pmf</literal> or <literal>@dfa</literal>
                    operator.</para>
            </note>
        </section>
        <section>
            <title>RESPONSE_CONTENT_TYPE</title>
            <para><emphasis role="bold">Description:</emphasis> Contains the normalized response content
                type.</para>
            <para><emphasis role="bold">Type:</emphasis> Scalar</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction
                    (<literal>RESPONSE_HEADERS</literal>)</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> Not implemented yet</para>
            <para>Response content type is constructed from the response <literal>Content-Type</literal>
                header. The value is first converted to keep only the content type part (and exclude
                character encoding information, if any), then converted to lowercase.</para>
        </section>
        <section>
            <title>RESPONSE_COOKIES</title>
            <para><emphasis role="bold">Description:</emphasis> Collection of response cookies
                (name/value pairs).</para>
            <para><emphasis role="bold">Type:</emphasis> Collection</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> Not implemented yet</para>
        </section>
        <section>
            <title>RESPONSE_HEADERS</title>
            <para><emphasis role="bold">Description:</emphasis> Collection of response headers
                (name/value pairs).</para>
            <para><emphasis role="bold">Type:</emphasis> Collection</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.2</para>
        </section>
        <section>
            <title>RESPONSE_LINE</title>
            <para><emphasis role="bold">Description:</emphasis> Full response line.</para>
            <para><emphasis role="bold">Type:</emphasis> String</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.3</para>
            <para>Transactions that do not specify a response line (e.g., HTTP prior to 1.0) will have
                an empty string value.</para>
            <para>Example: <programlisting>HTTP/1.1 200 OK</programlisting>
            </para>
        </section>
        <section>
            <title>RESPONSE_MESSAGE</title>
            <para><emphasis role="bold">Description:</emphasis> Response status message.</para>
            <para><emphasis role="bold">Type:</emphasis> String</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.3</para>
            <para>This field contains the status message (text following the status code), as specified
                on the response line. Transactions that do not specify a response line (e.g., HTTP prior
                to 1.0) will have an empty string value.</para>
        </section>
        <section>
            <title>RESPONSE_PROTOCOL</title>
            <para><emphasis role="bold">Description:</emphasis> Response protocol name and
                version.</para>
            <para><emphasis role="bold">Type:</emphasis> String</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.3</para>
            <para>This field contains the protocol name and version, as specified on the response line.
                Transactions that do not specify a response line (e.g., HTTP prior to 1.0) will have an
                empty string value.</para>
        </section>
        <section>
            <title>RESPONSE_STATUS</title>
            <para><emphasis role="bold">Description:</emphasis> Response status code.</para>
            <para><emphasis role="bold">Type:</emphasis> String</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.3</para>
            <para>This field contains the status code, as specified on the response line. Transactions
                that do not specify a response line (e.g., HTTP prior to 1.0) will have an empty string
                value.</para>
        </section>
        <section>
            <title>SERVER_ADDR</title>
            <para><emphasis role="bold">Description:</emphasis> Server IP address, extracted from the TCP connection. Can be in IPv4 or IPv6 format.</para>
            <para><emphasis role="bold">Type:</emphasis> String</para>
            <para><emphasis role="bold">Scope:</emphasis> Connection</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.2</para>
        </section>
        <section>
            <title>SERVER_PORT</title>
            <para><emphasis role="bold">Description:</emphasis> Server port, extracted from the TCP connection.</para>
            <para><emphasis role="bold">Type:</emphasis> Numeric</para>
            <para><emphasis role="bold">Scope:</emphasis> Connection</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.2</para>
        </section>
        <section>
            <title>SITE_NAME</title>
            <para><emphasis role="bold">Description:</emphasis> The name of the site to which the current transaction was assigned.</para>
            <para><emphasis role="bold">Type:</emphasis> String</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> Not implemented yet</para>
        </section>
        <section>
            <title>TX</title>
            <para><emphasis role="bold">Description:</emphasis> Transaction collection.</para>
            <para><emphasis role="bold">Type:</emphasis> Collection</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.3</para>
            <para>This collection contains arbitrary information for the transaction. It is a generic place
                  for rules to store transaction data in which other rules can monitor.</para>
        </section>
        <section>
            <title>UA</title>
            <para><emphasis role="bold">Description:</emphasis> User agent information extracted if the
                    <literal>user_agent</literal> module is loaded.</para>
            <para><emphasis role="bold">Type:</emphasis> Collection</para>
            <para><emphasis role="bold">Scope:</emphasis> Transaction</para>
            <para><emphasis role="bold">Module:</emphasis> user_agent</para>
            <para><emphasis role="bold">Version:</emphasis> 0.3</para>
            <note><para>While the <literal>User-Agent</literal> HTTP request header may be used in generating these
                    fields, the term "user agent" here refers to the client as a whole.</para></note>
            <para>Sub-Fields:
                <itemizedlist>
                    <listitem>
                        <para><emphasis role="bold">agent:</emphasis> String name of the user
                            agent.</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">product:</emphasis> String product deduced from the
                            user agent data.</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">os:</emphasis> String operating system deduced from
                            user agent data.</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">extra:</emphasis> Any extra string available after
                            parsing the <literal>User-Agent</literal> HTTP request header.</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">category:</emphasis> String category deduced from
                            user agent data.</para>
                    </listitem>
                </itemizedlist>
            </para>    
        </section>
    </section>
    <section>
        <title>Operators</title>
        <para>...</para>
        <section>
            <title>contains</title>
            <para><emphasis role="bold">Description:</emphasis> Returns true if the target contains the
                given sub-string.</para>
            <para><emphasis role="bold">Types:</emphasis> String</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.3</para>
            <para/>
        </section>
        <section>
            <title>dfa</title>
            <para><emphasis role="bold">Description:</emphasis> Deterministic finite atomation matching
                algorithm (PCRE's alternative matching algorithm).</para>
            <para><emphasis role="bold">Types:</emphasis> String</para>
            <para><emphasis role="bold">Module:</emphasis> pcre</para>
            <para><emphasis role="bold">Version:</emphasis> 0.4</para>
            <para>The <literal>dfa</literal> operator implements the alternative matching algorithm in
                the <link xlink:href="http://www.pcre.org/">PCRE</link> regular expressions library. The
                parameter of the operator is a regular expression pattern that is passed to the PCRE
                library without modification. This alternative matching algorithm uses a similar syntax
                to PCRE regular expressions, except that backtracking is not available. The primary use
                of <literal>dfa</literal> is to allow a subset of regular expression matching in a
                streaming manner (see <literal>StreamInspect</literal>). TODO: Describe limits on regex
                syntax.</para>
        </section>
        <section>
            <title>ee_match_any</title>
            <para><emphasis role="bold">Description:</emphasis> Returns true if the target matches any value in the named eudoxus automata.</para>
            <para><emphasis role="bold">Types:</emphasis> String</para>
            <para><emphasis role="bold">Module:</emphasis> ee</para>
            <para><emphasis role="bold">Version:</emphasis> 0.7</para>
            <para>The named eudoxus automata must first be laoded with the <literal>LoadEudoxus</literal> directive</para>
        </section>
        <section>
            <title>eq</title>
            <para><emphasis role="bold">Description:</emphasis> Returns true if the target is
                numerically equal to the given value.</para>
            <para><emphasis role="bold">Types:</emphasis> Numeric</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.3</para>
            <para/>
        </section>
        <section>
            <title>ge</title>
            <para><emphasis role="bold">Description:</emphasis> Returns true if the target is
                numerically greater than or equal to the given value.</para>
            <para><emphasis role="bold">Types:</emphasis> Numeric</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.3</para>
            <para/>
        </section>
        <section>
            <title>gt</title>
            <para><emphasis role="bold">Description:</emphasis> Returns true if the target is
                numerically greater than the given value.</para>
            <para><emphasis role="bold">Types:</emphasis> Numeric</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.3</para>
            <para/>
        </section>
        <section>
            <title>ipmatch</title>
            <para><emphasis role="bold">Description:</emphasis> Returns true if a target IPv4 address
                matches any given whitespace separated address in CIDR format.</para>
            <para><emphasis role="bold">Types:</emphasis> String</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.3</para>
            <para/>
        </section>
        <section>
            <title>ipmatch6</title>
            <para><emphasis role="bold">Description:</emphasis> Returns true if a target IPv6 address
                matches any given whitespace separated address in CIDR format.</para>
            <para><emphasis role="bold">Types:</emphasis> String</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.3</para>
            <para/>
        </section>
        <section>
            <title>le</title>
            <para><emphasis role="bold">Description:</emphasis> Returns true if the target is
                numerically less than or equal to the given value.</para>
            <para><emphasis role="bold">Types:</emphasis> Numeric</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.3</para>
            <para/>
        </section>
        <section>
            <title>lt</title>
            <para><emphasis role="bold">Description:</emphasis> Returns true if the target is
                numerically less than the given value.</para>
            <para><emphasis role="bold">Types:</emphasis> Numeric</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.3</para>
            <para/>
        </section>
        <section>
            <title>ne</title>
            <para><emphasis role="bold">Description:</emphasis> Returns true if the target is not
                numerically equal to the given value.</para>
            <para><emphasis role="bold">Types:</emphasis> Numeric</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.3</para>
            <para/>
        </section>
        <section>
            <title>pm</title>
            <para><emphasis role="bold">Description:</emphasis> Parallel matching using the
                    <literal>Aho-Corasick</literal> algorithm.</para>
            <para><emphasis role="bold">Types:</emphasis> String</para>
            <para><emphasis role="bold">Module:</emphasis> ac</para>
            <para><emphasis role="bold">Version:</emphasis> 0.2</para>
            <para>Implements a set-based (or parallel) matching function using the Aho-Corasick
                algorithm. The parameter of the operator contains one or more matching patterns,
                separated with whitespace. Set-based matching is capable of matching many patterns at
                the same time, making it efficient for cases when the number of patterns is very large
                (in hundreds and thousands).</para>
            <programlisting>Rule REQUEST_HEADERS:User-Agent @pm "one two three"</programlisting>
            <para>If the <literal>capture</literal> modifier is specified on a <literal>@pm</literal>
                rule, the <literal>TX.0</literal> variable will contain the matched data fragment. Do
                note that, because the <literal>pm</literal> operator can easily match many times per
                rule, the <literal>TX.0</literal> value is valid only when used in the same rule. In the
                following rules, <literal>TX.0</literal> will contain the data fragment of the last
                    <literal>@pm</literal> match.</para>
        </section>
        <section>
            <title>pmf</title>
            <para><emphasis role="bold">Description:</emphasis> Parallel matching with patterns from
                file.</para>
            <para><emphasis role="bold">Types:</emphasis> String</para>
            <para><emphasis role="bold">Module:</emphasis> ac</para>
            <para><emphasis role="bold">Version:</emphasis> 0.2</para>
            <para>Same as <literal>pm</literal>, but instead of accepting parameters directly, it loads
                them from the file whose filename was supplied. The file is expected to contain one
                pattern per line. To convert a line into a pattern, whitespace from the beginning and
                the end is removed. Empty lines are ignored, as are comments, which are lines that begin
                with <literal>#</literal>. Relative filenames are resolved from same directory as the
                configuration file.</para>
            <programlisting>Rule REQUEST_HEADERS:User-Agent @pmf bad_user_agents.dat</programlisting>
        </section>
        <section>
            <title>rx</title>
            <para><emphasis role="bold">Description:</emphasis> Regular expression (perl compatible
                regular expression) matching.</para>
            <para><emphasis role="bold">Types:</emphasis> String</para>
            <para><emphasis role="bold">Module:</emphasis> pcre</para>
            <para><emphasis role="bold">Version:</emphasis> 0.2</para>
            <para>The <literal>rx</literal> operator implements <link xlink:href="http://www.pcre.org/"
                    >PCRE</link> regular expressions. The parameter of the operator is a regular
                expression pattern that is passed to the PCRE library without modification.</para>
            <programlisting>Rule ARGS:userId !@rx ^[0-9]+$</programlisting>
            <para>Patterns are compiled with the following settings:</para>
            <itemizedlist>
                <listitem>
                    <para>Entire input is treated as a single buffer against which matching is
                        done.</para>
                </listitem>
                <listitem>
                    <para>Patterns are case-sensitive by default.</para>
                </listitem>
                <listitem>
                    <para>Patterns are compiled with <literal>PCRE_DOTALL</literal> and
                            <literal>PCRE_DOLLAR_ENDONLY</literal> set.</para>
                </listitem>
            </itemizedlist>
            <section>
                <title>Using captured substrings to create variables</title>
                <para>Regular expressions can be used to capture substrings. In IronBee, the captured
                    substrings can be used to create new variables in the <literal>TX</literal>
                    collection. To use this feature, specify the <literal>capture</literal> modifier in
                    the rule.</para>
                <programlisting>Rule ARGS @rx (\d{13,16}) capture</programlisting>
                <para>When capture is enabled, IronBee will always create a variable
                        <literal>TX.0</literal>, which will contain the entire matching area of the
                    pattern. Anonymous capture groups will create up to 9 variables, from
                        <literal>TX.1</literal> to <literal>TX.9</literal>. These special
                        <literal>TX</literal> variables will remain available until the next capture
                    rule is run, when they will all be deleted.</para>
            </section>
        </section>
        <section>
            <title>streq</title>
            <para><emphasis role="bold">Description:</emphasis> Returns true if target exactly matches
                the given string.</para>
            <para><emphasis role="bold">Types:</emphasis> String</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.3</para>
            <para></para>
        </section>
    </section>
    <section>
        <title>Modifiers</title>
        <para>...</para>
        <section>
            <title>allow</title>
            <para><emphasis role="bold">Description:</emphasis> Mark a transaction as allowed to proceed
                to a given inspection point.</para>
            <para><emphasis role="bold">Type:</emphasis> Action</para>
            <para><emphasis role="bold">Syntax:</emphasis>
                <literal>allow[:phase | :request]</literal></para>
            <para><emphasis role="bold">Cardinality</emphasis>: 0..1</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.4</para>
            <para>By default this allows the transaction to proceed without inspection until the postprocessing phase. This can be changed depending on the modifier used:</para>
            <itemizedlist>
                <listitem><para><emphasis role="bold">phase</emphasis> - Proceed to the end of the current phase without further rule execution.</para></listitem>
                <listitem><para><emphasis role="bold">request</emphasis> - Proceed to the end of the request processing phases without further rule execution.</para></listitem>
            </itemizedlist>
        </section>
        <section>
            <title>logdata</title>
            <para><emphasis role="bold">Description:</emphasis> Add data to be logged with the event.</para>
            <para><emphasis role="bold">Type:</emphasis> Metadata</para>
            <para><emphasis role="bold">Syntax:</emphasis>
                <literal>logdata:<replaceable>data</replaceable></literal></para>
            <para><emphasis role="bold">Cardinality</emphasis>: 0..1</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.2</para>
            <para>Log a data fragment as part of the error message.</para>
            <programlisting>Rule ARGS @rx pattern \
        "msg:Test matched" logdata:%{MATCHED_VAR}</programlisting>
            <para>Note: Up to 128 bytes of data will be recorded.</para>
        </section>
        <section>
            <title>block</title>
            <para><emphasis role="bold">Description:</emphasis> Mark a transaction to be blocked.</para>
            <para><emphasis role="bold">Type:</emphasis> Action</para>
            <para><emphasis role="bold">Syntax:</emphasis>
                <literal>block[:advisory | :phase | :immediate]</literal></para>
            <para><emphasis role="bold">Cardinality</emphasis>: 0..1</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.4</para>
            <para>By default this marks the transaction with an advisory blocking flag. This can be changed depending on the modifier used:</para>
            <itemizedlist>
                <listitem><para><emphasis role="bold">advisory</emphasis> - Mark the transaction with an advisory blocking flag which further rules may take into account.</para></listitem>
                <listitem><para><emphasis role="bold">phase</emphasis> - Block the transaction at the end of the current phase.</para></listitem>
                <listitem><para><emphasis role="bold">immediate</emphasis> - Block the transaction immediatly after rule execution.</para></listitem>
            </itemizedlist>
        </section>
        <section>
            <title>capture</title>
            <para><emphasis role="bold">Description:</emphasis> Enable capturing the matching
                data.</para>
            <para><emphasis role="bold">Type:</emphasis> Modifier</para>
            <para><emphasis role="bold">Syntax:</emphasis>
                <literal>capture</literal></para>
            <para><emphasis role="bold">Cardinality</emphasis>: 0..1</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.4</para>
            <para>Enabling capturing will poopulate the <literal>CAPTURE</literal> collection with data
                from the most recent matching operator. For most operators the
                    <literal>CAPTURE:0</literal> field will be set to the last matching value. Operators
                that support capturing multiple values may set other items in the
                    <literal>CAPTURE</literal> collection. For example, the <literal>rx</literal>
                operator supports setting <literal>CAPTURE:1</literal> - <literal>CAPTURE:9</literal>
                via capturing parens in the regular expression.</para>
        </section>
        <section>
            <title>chain</title>
            <para><emphasis role="bold">Description:</emphasis> Chains the next rule, so that the next
                rule will execute only if the current operator evaluates true.</para>
            <para><emphasis role="bold">Type:</emphasis> Modifier</para>
            <para><emphasis role="bold">Syntax:</emphasis>
                <literal>chain</literal></para>
            <para><emphasis role="bold">Cardinality</emphasis>: 0..1</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.4</para>
            <para>Rule chains are essentially rules that are bound together by a logical AND with short
                circuiting. In a rule chain, each rule in the chain is executed in turn as long as the
                operators are evaluating true. If an operator evaluates to false, then no further rules
                in the chain will execute. This allows a rule to execute multiple operators.</para>
            <para>All rules in the chain will still execute their actions before the next rule in the
                chain executes.  If you want a rule that only executes an action if all operators
                evaluate true, then the action should be given on the final rule in the chain.</para>
            <para>Requirements for chained rules:<itemizedlist>
                    <listitem>
                        <para>Only the first rule in the chain may have an id or phase, which will be
                            used for all rule chains.</para>
                    </listitem>
                    <listitem>
                        <para>A numeric chain ID will be assigned and appended to the rule ID, prefixed
                            with a dash, to uniquely identify the rule.</para>
                    </listitem>
                    <listitem>
                        <para>Different metadata attributes (except id/phase) may be given for each
                            chain, but the first rule's metasta will be the default.</para>
                    </listitem>
                    <listitem>
                        <para>Specifying one or more tag modifiers is allowed in any chain, but the tags
                            will be bound to the entire rule chain so that RuleEnable and similar will
                            act on the entire rule chain, not just an individual rule in the
                            chain.</para>
                    </listitem>
                </itemizedlist></para>
            <para>Example:<programlisting># Start a rule chain, which matches only POST requests. The implicit ID here
    # will be set to "id:1-1".
    Rule REQUEST_METHOD "@rx ^(?i:post)$" id:1 phase:REQUEST chain
    # Only if the above rule's operator evaluates true, will the next rule in the
    # chain execute. This rule checks to see if there are any URI based parameters
    # which typically should not be there for POST requests. If the operator evaluates
    # true, then the setvar action will execute, marking the transaction and an
    # event will be generated with the given msg text. This rule will have the
    # implicit ID set to "id:1-2".
    Rule &amp;REQUEST_URI_PARAMS @gt 0 "msg:POST with URI parameters." setvar:TX:uri_params_in_post=1 event chain
    # Only if the above two rules' operators return true will the next rule in the
    # chain execute.  This rule checks that certain parameters are not used in
    # on the URI and if so, generates an event and blocks the transaction with the
    # default status code at the end of the phase. This rule will have the implicit
    # ID set to "id:1-3".
    Rule &amp;REQUEST_URI_PARAMS:/^(id|sess)$/ @gt 0 "msg:Sensitive parameters in URI." event block:phase</programlisting></para>
        </section>
        <section>
            <title>confidence</title>
            <para><emphasis role="bold">Description:</emphasis> Numeric value indicating the confidence
                of the rule.</para>
            <para><emphasis role="bold">Type:</emphasis> Metadata</para>
            <para><emphasis role="bold">Syntax:</emphasis>
                <literal>confidence:<replaceable>integer (0-100)</replaceable></literal></para>
            <para><emphasis role="bold">Cardinality</emphasis>: 0..1</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.4</para>
            <para>Higher confidence rules should have a lower False Positive rate.</para>
        </section>
        <section>
            <title>delRequestHeader</title>
            <para><emphasis role="bold">Description:</emphasis> Delete an HTTP header from the
                request.</para>
            <para><emphasis role="bold">Type:</emphasis> Action</para>
            <para><emphasis role="bold">Syntax:</emphasis>
                <literal>delRequestHeader:<replaceable>header-name</replaceable></literal></para>
            <para><emphasis role="bold">Cardinality</emphasis>: 0..n</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.4</para>
        </section>
        <section>
            <title>delResponseHeader</title>
            <para><emphasis role="bold">Description:</emphasis> Delete an HTTP header from the
                response.</para>
            <para><emphasis role="bold">Type:</emphasis> Action</para>
            <para><emphasis role="bold">Syntax:</emphasis>
                <literal>delResponseHeader:<replaceable>header-name</replaceable></literal></para>
            <para><emphasis role="bold">Cardinality</emphasis>: 0..n</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.4</para>
        </section>
        <section>
            <title>id</title>
            <para><emphasis role="bold">Description:</emphasis> Unique identifier for a rule.</para>
            <para><emphasis role="bold">Type:</emphasis> Metadata</para>
            <para><emphasis role="bold">Syntax:</emphasis>
                <literal>id:<replaceable>name</replaceable></literal></para>
            <para><emphasis role="bold">Cardinality</emphasis>: 1</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.4</para>
            <para>Specifies a unique identifier for a rule.  If a later rule re-uses the same identifier,
                then it will overwrite the previous rule.</para>
            <para>TODO: Explain what the full unique id is (taking context and chains into
                account)</para>
        </section>
        <section>
            <title>msg</title>
            <para><emphasis role="bold">Description:</emphasis> Message associated with the rule.</para>
            <para><emphasis role="bold">Type:</emphasis> Metadata</para>
            <para><emphasis role="bold">Syntax:</emphasis>
                <literal>msg:<replaceable>text</replaceable></literal></para>
            <para><emphasis role="bold">Cardinality</emphasis>: 0..1</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.4</para>
            <para>This message is used by the <literal>event</literal> action when logging the
                event.</para>
        </section>
        <section>
            <title>phase</title>
            <para><emphasis role="bold">Description:</emphasis> The runtime phase at which the rule
                should execute.</para>
            <para><emphasis role="bold">Type:</emphasis> Metadata</para>
            <para><emphasis role="bold">Syntax:</emphasis>
                <literal>phase:REQUEST_HEADER|REQUEST|RESPONSE_HEADER|RESPONSE|POSTPROCESS</literal></para>
            <para><emphasis role="bold">Cardinality</emphasis>: 1</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.4</para>
            <para>Rule phase determines when a rule runs. IronBee understands the following
                phases:</para>
            <variablelist>
                <varlistentry>
                    <term><literal>REQUEST_HEADER</literal></term>
                    <listitem>
                        <para>Invoked after the entire HTTP request headers has been read, but before
                            reading the HTTP request body (if any). Most rules should not use this
                            phase, opting for the <literal>REQUEST</literal> phase instead.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>REQUEST</literal></term>
                    <listitem>
                        <para>Invoked after receiving the entire HTTP request, which may involve request
                            body and request trailers, but it will run even when neither is
                            present.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>RESPONSE_HEADER</literal></term>
                    <listitem>
                        <para>Invoked after receiving the HTTP entire response header.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>RESPONSE</literal></term>
                    <listitem>
                        <para>Invoked after receiving the HTTP response body (if any) and response
                            trailers (if any).</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>POSTPROCESS</literal></term>
                    <listitem>
                        <para>Invoked after the entire transaction has been processed. This phase is for
                            logging and tracking data between transactions, such as storing state.
                            Actions cannot affect the transaction in this phase.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>
        <section>
            <title>rev</title>
            <para><emphasis role="bold">Description:</emphasis> An integer rule revision.</para>
            <para><emphasis role="bold">Type:</emphasis> Metadata</para>
            <para><emphasis role="bold">Syntax:</emphasis>
                <literal>rev:<replaceable>integer (1-n)</replaceable></literal></para>
            <para><emphasis role="bold">Cardinality</emphasis>: 0..1</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.4</para>
            <para>TODO: Explain how this is used in RuleEnable and when overriding Rules in sub
                contexts.</para>
        </section>
        <section>
            <title>setflag</title>
            <para><emphasis role="bold">Description:</emphasis> Set, or unset, boolean transaction attributes (flags).</para>
            <para><emphasis role="bold">Type:</emphasis> Action</para>
            <para><emphasis role="bold">Syntax:</emphasis>
                <literal>setflag:[!]<replaceable>flag-name</replaceable></literal></para>
            <para><emphasis role="bold">Cardinality</emphasis>: 0..n</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.6</para>
            <para>Allow setting or unsetting transaction flags. Prefixing with a <literal>!</literal> unsets the flag.</para>
            <note><para>Currently the <literal>inspectRequestHeader</literal> flag is always set as this is required for the site selection process. Additionally, the <literal>RequestBuffering</literal> and <literal>ResponseBuffering</literal> directives must be enabled to buffer the request or response.</para></note>
            <itemizedlist>
                <listitem><para><emphasis role="bold">block</emphasis> - Set if transaction was marked for block.</para></listitem>
                <listitem><para><emphasis role="bold">suspicious</emphasis> - Set if transaction was marked as suspicious and care should be taken in processing.</para></listitem>
                <listitem><para><emphasis role="bold">inspectRequestHeader</emphasis> - Set if the engine should inspect the HTTP request header (default: set).</para></listitem>
                <listitem><para><emphasis role="bold">inspectRequestBody</emphasis> - Set if the engine should inspect the HTTP request body (default: unset).</para></listitem>
                <listitem><para><emphasis role="bold">inspectResponseHeader</emphasis> - Set if the engine should inspect the HTTP response header (default: unset).</para></listitem>
                <listitem><para><emphasis role="bold">inspectResponseBody</emphasis> - Set if the engine should inspect the HTTP response body (default: unset).</para></listitem>
            </itemizedlist>
        </section>
        <section>
            <title>setRequestHeader</title>
            <para><emphasis role="bold">Description:</emphasis> Set the value of a HTTP request
                header.</para>
            <para><emphasis role="bold">Type:</emphasis> Action</para>
            <para><emphasis role="bold">Syntax:</emphasis>
                <literal>setRequestHeader:<replaceable>header-name</replaceable>=<replaceable>header-value</replaceable></literal></para>
            <para><emphasis role="bold">Cardinality</emphasis>: 0..n</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.4</para>
        </section>
        <section>
            <title>setResponseHeader</title>
            <para><emphasis role="bold">Description:</emphasis> Set the value of an HTTP response
                header.</para>
            <para><emphasis role="bold">Type:</emphasis> Action</para>
            <para><emphasis role="bold">Syntax:</emphasis>
                <literal>setResponseHeader:<replaceable>header-name</replaceable>=<replaceable>header-value</replaceable></literal></para>
            <para><emphasis role="bold">Cardinality</emphasis>: 0..n</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.4</para>
        </section>
        <section>
            <title>setvar</title>
            <para><emphasis role="bold">Description:</emphasis> Set a variable data field.</para>
            <para><emphasis role="bold">Type:</emphasis> Action</para>
            <para><emphasis role="bold">Syntax:</emphasis>
                <literal>setvar:[!]<replaceable>variable-field-name</replaceable>=[+|-]<replaceable>value</replaceable></literal></para>
            <para><emphasis role="bold">Cardinality</emphasis>: 0..n</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.2</para>
            <para>The <literal>setvar</literal> modifier is used for data field manipulation. To create
                a variable data field or change its value:</para>
            <programlisting>setvar:tx:score=1</programlisting>
            <para>To remove all instances of a named variable data field:</para>
            <programlisting>setvar:!tx:score</programlisting>
            <para>To increment or decrement a variable data field value:</para>
            <programlisting>setvar:tx:score=+5
    setvar:tx:score=-5</programlisting>
            <para>An attempt to modify a value of a non-numerical variable will assume the old value was
                zero (NOTE: Probably should just fail, logging an attempt was made to modify a
                non-numerical value).</para>
        </section>
        <section>
            <title>severity</title>
            <para><emphasis role="bold">Description:</emphasis> Numeric value indicating the severity of
                the issue this rule is trying to protect against.</para>
            <para><emphasis role="bold">Type:</emphasis> Metadata</para>
            <para><emphasis role="bold">Syntax:</emphasis>
                <literal>severity:<replaceable>integer (0-100)</replaceable></literal></para>
            <para><emphasis role="bold">Cardinality</emphasis>: 0..1</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.4</para>
            <para>The severity indicates how much impact a successful attack may be, but does not
                indicate the quality of protection this rule may provide. The severity is meant to be
                used as part of a "threat level" indicator.  The "threat level" is essentially severity
                x confidence, which balances how severe the threat may be with how well this rule might
                be protecting against it.</para>
        </section>
        <section>
            <title>status</title>
            <para><emphasis role="bold">Description:</emphasis> The HTTP status code to use for a
                blocking action.</para>
            <para><emphasis role="bold">Type:</emphasis> Modifier</para>
            <para><emphasis role="bold">Syntax:</emphasis>
                <literal>status:<replaceable>http-status-code</replaceable></literal></para>
            <para><emphasis role="bold">Cardinality</emphasis>: 0..1</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.4</para>
        </section>
        <section>
            <title>t</title>
            <para><emphasis role="bold">Description:</emphasis> Apply one or more named transformations
                to each of the targerts in a rule.</para>
            <para><emphasis role="bold">Type:</emphasis> Modifier</para>
            <para><emphasis role="bold">Syntax:</emphasis>
                <literal>t:<replaceable>transformation-name</replaceable></literal></para>
            <para><emphasis role="bold">Cardinality</emphasis>: 0..n</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.4</para>
        </section>
        <section>
            <title>tag</title>
            <para><emphasis role="bold">Description:</emphasis> Apply an arbitrary tag name to a
                rule.</para>
            <para><emphasis role="bold">Type:</emphasis> Metadata</para>
            <para><emphasis role="bold">Syntax:</emphasis> <literal>tag:<replaceable>name</replaceable></literal></para>
            <para><emphasis role="bold">Cardinality</emphasis>: 0..n</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.4</para>
            <para>TODO: Describe where this is used, noteably RuleEnable/RuleDisable and logged with
                events.</para>
        </section>
    </section>
    <section>
        <title>Transformation Functions</title>
        <para>...</para>
        <section>
            <title>base64Decode</title>
            <para><emphasis role="bold">Description:</emphasis>
            </para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> Not implemented yet.</para>
        </section>
        <section>
            <title>compressWhitespace</title>
            <para><emphasis role="bold">Description:</emphasis> Replaces one or more consecutive
                whitespace characters with a single space.</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.3</para>
            <para>Replaces various whitespace characters with spaces. In addition, consecutive
                whitespace characters will be reduced down to a single space. Whitespace characters are:
                    <literal>0x20</literal>, <literal>\f</literal>, <literal>\t</literal>,
                    <literal>\n</literal>, <literal>\r</literal>, <literal>\v</literal>,
                    <literal>0xa0</literal> (non-breaking white space).</para>
        </section>
        <section>
            <title>count</title>
            <para><emphasis role="bold">Description:</emphasis> Given a collection, it returns the
                number if items in the collection.  Given a scalar, returns 1.</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.4</para>
        </section>
        <section>
            <title>htmlEntityDecode</title>
            <para><emphasis role="bold">Description:</emphasis> Decodes HTML entities in the
                data.</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> Not implemented yet.</para>
            <para>The following forms are supported:</para>
            <itemizedlist>
                <listitem>
                    <para><emphasis role="bold">&amp;#<replaceable>DDDD</replaceable>;</emphasis> -
                        Numeric code point, where <replaceable>DDDD</replaceable> represents a decimal
                        number with any number of digits.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">&amp;#x<replaceable>HHHH</replaceable>;</emphasis> -
                        Numeric code point, where HHHH represents a hexidecimal number with any number
                        of digits.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">&amp;<replaceable>name</replaceable>;</emphasis> -
                        Predefined XML named entities (currently: quot, amp, apos, lt, gt). </para>
                </listitem>
            </itemizedlist>
            <para>See
                    <uri>https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references</uri>.</para>
        </section>
        <section>
            <title>length</title>
            <para><emphasis role="bold">Description:</emphasis> Returns the byte length of the
                value.</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.4</para>
        </section>
        <section>
            <title>lowercase</title>
            <para><emphasis role="bold">Description:</emphasis> Returns the input as all lower case
                characters.</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.2</para>
        </section>
        <section>
            <title>removeWhitespace</title>
            <para><emphasis role="bold">Description:</emphasis> Removes one or more consecutive
                whitespace characters.</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.3</para>
            <para>Similar to <literal>compressWhitespace</literal>, except removes the characters
                instead of replacing them with a single space.</para>
        </section>
        <section>
            <title>removeComments</title>
            <para><emphasis role="bold">Description:</emphasis> Remove various types of code
                comments.</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> Not implemented yet.</para>
            <para>The following style comments are replaced: <itemizedlist>
                    <listitem>
                        <para><emphasis role="bold">/* ... */</emphasis> - C style comments.</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">// ...</emphasis> - C++ style comments.</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold"># ...</emphasis> - Shell style comments.</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">-- ...</emphasis> - SQL style comments.</para>
                    </listitem>
                </itemizedlist></para>
        </section>
        <section>
            <title>replaceComments</title>
            <para><emphasis role="bold">Description:</emphasis> Replace various types of code comments
                with a single space character.</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> Not implemented yet.</para>
            <para>This is similar to <literal>removeComments</literal>, but instead of removing,
                replaces with a single space character.</para>
        </section>
        <section>
            <title>trim</title>
            <para><emphasis role="bold">Description:</emphasis> Removes consecutive whitespace from the
                beginning and end of the input.</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.2</para>
        </section>
        <section>
            <title>trimLeft</title>
            <para><emphasis role="bold">Description:</emphasis> Removes consecutive whitespace from the
                beginning of the input.</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.2</para>
        </section>
        <section>
            <title>trimRight</title>
            <para><emphasis role="bold">Description:</emphasis> Removes consecutive whitespace from the
                end of the input.</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.2</para>
        </section>
        <section>
            <title>urlDecode</title>
            <para><emphasis role="bold">Description:</emphasis> Decodes URL encoded values in the
                input.</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> Not implemented yet.</para>
            <para>Implements decoding the encoding used in application/x-www-form-urlencoded values
                (percent encoding with additions).</para>
            <itemizedlist>
                <listitem>
                    <para><emphasis role="bold">%<replaceable>HH</replaceable>;</emphasis> - Numeric
                        code point, where HH represents a two digit hexidecimal number.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">+</emphasis> - Represents an ASCII space character
                        (equiv to <literal>%20</literal>). </para>
                </listitem>
            </itemizedlist>
            <warning>
                <para>Fields which are parsed from the URI and form parameters are already URL Decoded
                    and you should not apply this transformation to these fields unless you are trying
                    to inspect multiple levels of encoding.</para>
            </warning>
        </section>
        <section>
            <title>min</title>
            <para><emphasis role="bold">Description:</emphasis> Given a collecion of numeric data,
                returns the minimum value.</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.3</para>
        </section>
        <section>
            <title>max</title>
            <para><emphasis role="bold">Description:</emphasis> Given a collection of numeric data,
                returns the maximum value.</para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> 0.3</para>
        </section>
        <section>
            <title>normalizePath</title>
            <para><emphasis role="bold">Description:</emphasis> </para>
            <para><emphasis role="bold">Module:</emphasis> core</para>
            <para><emphasis role="bold">Version:</emphasis> Not implemented yet.</para>
        </section>
    </section>
</chapter>
