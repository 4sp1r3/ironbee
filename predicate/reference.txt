////
This file is intended to be read in HTML via translation with asciidoc.
////

Predicate Reference
===================
Christopher Alfeld <calfeld@qualys.com>
:toc:

Introduction
------------

This document is the reference manual for Predicate.  It contains precise descriptions of every aspect and function in the Predicate language.

Values
------

The value system of Predicate closely matches that of IronBee.  Values are named and typed.  Names are allowed to be any string, although, in practice, they tend to be short and human readible.

There is a special value, _null_, written as +:+.  The null value has no name and no type.

NOTE: With the exception of null and lists, values are immutable.  See <<_results, Results>> below.

The types are:

String:: Strings can be of any length and can contain unprintable and null characters.
Number:: Numbers are signed 64 bit integers.
Float:: Floating points are long double precision floats.
Lists:: Lists are lists of values.
Special:: There are a few rare exceptions.  See <<p.ask, +ask+>>.

The null value is treated as false.  All other values are treated as true.

At present, the canonical true value is the empty string, +''+.  However, this convention should not be relied upon.

Results
-------

The result of any predicate expression is a value and a finished flag.  While the expression is not finished, certain changes to the value are allowed.  Once an expression is finished, its value is fixed.

Values of unfinished expressions are only allowed to change in certain specific ways.  All expressions begin with the null value, +:+.  The allowed changes are:

- Null to non-null.
- Appending to a list value.

NOTE: An expression that takes a non-null non-list value must be finished.  Also note that nodes may not change to the null value, only away from it.

S-Expressions
-------------

The underlying syntax of Predicate is that of an s-expression (sexpr).

The grammar of a Predicate expression is:

----
expression      := call | literal
call            := ' '* '(' name ( ' '+ expression )* ')'
name            := first_name_char name_char*
first_name_char := [A-Za-z_]
name_char       := first_name_char | [.-]
literal         := null | named_literal | literal_value
null            := ':'
named_literal   := literal_name ':' literal_value
literal_name    := string | name
literal_value   := list | string | float | integer
string          := '\'' (/[^'\\]/ | '\\\\' | '\\'')* '\''
integer         := '-'? [0-9]+
float           := '-'? [0-9]+ ('.' [0-9]+)?
list            := '[' ( literal ( ' '+ literal )* )? ']'
----

Note that many contexts, e.g., use in rules, requires the top expression to be a call.

Informally:

Function Call:: +(_name_ _arg1_ _arg2_ ...)+.  Call function _name_ with given arguments.

Null:: +:+

Named Literal:: +name:value+.  Names can be written the same as strings, beginning and ending with +\'+.  If the name satisfies the rules of function names, the ++'++s can be omitted.

Unnamed Literal:: +value+

String Value:: E.g., +\'hello world'+.  Single quotes can be embedded via +\'+ and backslashes via +\\+.  More generally, +\x+ is equivalent to +x+ for any +x+.

Number Value:: E.g., +6+, +-13+.

Float Value:: E.g., +3.141+, +-7.0+.  The presence of a period distinguishes floats from numbers.

List Values: +[value1 value2 ...]+.

Functions
---------

Arguments
~~~~~~~~~

Static:: Static arguments must be literals.  Typically, a static argument requires some amount of preprocessing before it can be used, and this preprocessing should not be done at runtime.  E.g., a regular expression.

Dynamic:: Dynamic arguments are any that are not static.  All dynamic arguments may be literals.

Categories
~~~~~~~~~~

There are several categories of functions.

Primary:: A primary function has a single "primary" argument that is always the last argument.  The function can be viewed as performing some sort of operation or transformation on the primary argument.  There may be additional "secondary" arguments that can be viewed as configuration of that operation.  A Primary function will do nothing (have a result of +:+) until all secondary arguments are finished.

Map:: A Map function is a Primary function that has a list primary argument and apply a subfunction to every subvalue of that list.  The result of a map function is the results of that subfunction.  If the primary argument is an actual list, +[value1, value2, ...]+, the then result will be the subfunction +f+ applied to each value: +[f(value1) f(value2) ...]+.  If the primary argument is a null, the result will be a null.  If the primary argument is not a list, the result will be the subfunction applied to the argument.

Filter:: A Filter function is similar to Map, but instead of applying a subfunction to each subvalue, it chooses a subset based.  That is, it applies a subfunction to each subvalue and inclues the subvalue in the result iff the subfunction returns true.  If the primary argument is not a list, the result be the primary argument iff the subfunction is true when applied to the primary argument.

Selector:: A Selector function is similar to Filter, but instead of returning a list of passing subvalues, it returns the first passing subvalue.

Abelian:: An Abelian function behaves the same even if its argument are reordered.  This order independence can provide higher performance by merging calls that differ only in order.

Reference
---------

Every predicate function is described below.  Possible attributes are:

*Result*: The result of the function.

*Finished*: Conditions under which the function is finished.

*Category*: The category of the function.  Note that a category can imply many aspects of the function.  Those aspects will not be repeated in the specific function description.

*See*: Other related functions.

*Arguments*: Detailed information about arguments.  When Arguments is omitted, it can be assumed that all arguments are dynamic.

*Transformations*: How the function will transform.  When Transformations is omitted, the function may still transform according to its category.  Also, most function will transform if all of their arguments are literals.

*Warning*: Warnings about dangerous or unintuitive behavior.

*Note*: Notes about behavior.

*Map*: For map functions, the subfunction.

*Filter*: For filter functions, the filter.

*Selector*: For selector functions, the selector.

*Deprecated*: Why to avoid using this function and when it is going away.

[[s.boolean]]
Boolean
~~~~~~~

These functions provide boolean logic functionality.

[[p.true]]
+(true)+
^^^^^^^^

*Result*: N/A +
*Finished*: N/A

*Transformations*::
  +(true) -> ''+

[[p.false]]
+(false)+
^^^^^^^^^

*Result*: N/A +
*Finished*: N/A

*Transformations*::
  +(false) -> :+

[[p.and]]
+(and ...) (andSC ...)+
^^^^^^^^^^^^^^^^^^^^^^^

*Category*: Abelian (+and+ only) +
*Result*: True iff all arguments are true or there are no arguments. +
*Finished*: All arguments are true or all arguments are finished. +
*Note*: +andSC+ differs from +and+ in that it is not abelian and will only evaluate an argument once all previous arguments are true.

*Transformations*::
  +(and ... : ...) -> :+ +
  +(and ... x ...) -> (and ... ...)+ if +x+ is true literal +
  +(andSC ... : ...) -> :+ +
  +(andSC ... x ...) -> (and ... ...)+ if +x+ is true literal.

[[p.or]]
+(or ...)+ +(orSC ...)+
^^^^^^^^^^^^^^^^^^^^^^^

*Category*: Abelian (+or+ only) +
*Result*: True iff any argument is true and there are arguments. +
*Finished*: Any argument is true or all arguments are finished. +
*Note*: +orSC+ differs from +or+ in that it is not abelian and will only evaluate an argument once all previous arguments are false and finished.

*Transformations*::
  +(or ... x ...) -> &apos;'+ if +x+ is true literal. +
  +(or ... : ...) -> (or ... ...)+. +
  +(orSC ... x ...) -> ''+ if +x+ is true literal. +
  +(orSC ... : ...) -> (or ... ...)+.

[[p.not]]
+(not a)+
^^^^^^^^^

*Result*: True iff +a+ is false and finished. +
*Finished*: +a+ is true or +a+ is finished. +
*Warning*: The result will be false until +a+ is finished, even if +a+ is currently +:+.  This behavior is because, once the result becomes true it cannot return to false.

[[p.if]]
+(if p t f)+ +(if p t)+
^^^^^^^^^^^^^^^^^^^^^^^

*Arguments*: +f+ may be omitted, in which case it is treated as +:+. +
*Result*: +t+ if +p+ is true, +f+ if +p+ is false and finished, +:+ otherwise. +
*Finished*: +t+ is finished and +p+ is true or +f+ is finished and +p+ is false and finished. +
*Note*: Interpreted as a short circuiting hint, e.g., "don't evaluated +t+ unless +p+ is true".

*Transformations*::
  +(if p t f) -> t+ if +p+ is true literal. +
  +(if : t f) -> f+. +
  +(if p t) -> t+ if +p+ is true literal. +
  +(if : t) -> :+.

List
~~~~

These function provide for manipulations of list values.

[[p.setName]]
+(setName n v)+
^^^^^^^^^^^^^^^

*Category*: Map +
*Map*: +x:y -> n:y+ +
*Note*: To set the name of a list, use +(first (setName n (list v)))+.

[[p.pushName]]
+(pushName v)+
^^^^^^^^^^^^^^

*Category*: Map +
*Map*: +x:y -> n:y+ where +n+ is the name of +v+. +
*Note*: Useful with <<p.flatten, +flatten+>> to flatten a list but preserve the names of the parent lists: +(flatten (pushName v))+.

[[p.cat]]
+(cat ...)+
^^^^^^^^^^^

*Arguments*: All arguments are treated as list values, i.e., +:+ is treated as +[]+ and a non-list +v+ is treated as +[v]+. +
*Result*: The concatenation of all arguments.  As the result can only be appended to, these are added as possible.  I.e., +cat+ adds all the values of the first argument as they become available and only moves to the second argument once the first argument is finished, and so on.  If provided no arguments, the result will be +:+. +
*Finished*: All arguments are finished.

*Note*::
  +cat+ has, by a significant margin, the most complicated implementation. +
  In the future, a function that behaves like +cat+ but does not preserve order and processes all arguments simultaneously will be added.

*Transformations*::
  +(cat) -> []+ +
  +(cat ... : ...) -> (cat ... ...)+ +
  +(cat ... [] ...) -> (cat ... ...)+ +
  +(cat v) -> v+ if +v+ is a list literal.

[[p.list]]
+(list ...)+
^^^^^^^^^^^^

*Result*: +[...]+, i.e., a list of the values of the arguments.  Elements will be added as arguments finish, i.e., the first element will be added when the first argument is finished, and then +list+ will consider the second argument. +
*Finished*: All arguments are finished. +
*Warning*: If no arguments are given, the result is +[]+, not +:+. +

[[p.first]]
+(first v)+
^^^^^^^^^^^

*Category*: Selector. +
*Selector*: First element.

[[p.rest]]
+(rest v)+
^^^^^^^^^^

*Category*: Filter +
*Fitler*: Not first element. +
*Finished*: +v+ is finished.

[[p.nth]]
+(nth n v)+
^^^^^^^^^^^

*Category*: Selector. +
*Arguments*: +n+ must be a number. +
*Selector*: +n+th element. +
*Notes*: The first element is 1, not 0.

[[p.flatten]]
+(flatten v)+
^^^^^^^^^^^^^

*Result*: If +v+ is +[a1 a2 ...]+, then this behaves as +(cat a1 a2 ...)+ would.  Otherwise, the value is +v+. +
*Finished*: +v+ is finished. +
*Note*: Sublists of +v+ are immutable, only +v+ is allowed to append.

[[p.focus]]
+(focus n v)+
^^^^^^^^^^^^^

*Arguments*: +n+ must be a string. +
*Result*: +focus+ acts like a filter and a map.  First, it filters +v+ by selecting only elements that are lists containing elements named +n+.  Then it maps by replacing such a list with the element named +n+ renamed to have the same name as the replaced list.  If +v+ is not a list, then the result is +[]+. +
*Finished*: +n+ is finished and +v+ is finished. +
*Note*: +focus+ is best viewed as selecting subresults.  For example, say you apply a regular expression to a list of inputs, resulting a list of capture collections named after the inputs.  You now want to select a specific capture from each capture collection will preserving the names of the input.  +focus+ will do exactly that.

*Transformations*::
  +(focus n v) -> []+ if +v+ is a non-list literal.

String
~~~~~~

[[p.stringReplaceRx]]
+(stringReplaceRx e r v)+
^^^^^^^^^^^^^^^^^^^^^^^^^

*Category*: Map. +
*Arguments*: +e+ and +r+ must be literal strings.  +e+ must be a valid regular expression and +r+ a valid replacement string (according to +boost::regex+).  +v+ must be a string or list of strings. +
*Map*: +x -> y+ where +y+ has every substring of +x+ matching +e+ replaced with +r+. +
*Deprecated*: This function will eventually be removed once an IronBee transformation doing an equivalent task is available.

[[p.length]]
+(length v)+
^^^^^^^^^^^^

*Category*: Map. +
*Map*: +x -> length of x* if *x* is a string and null otherwise.

[[s.filters]]
Filters
~~~~~~~

[[p.eq]]
+(eq x v)+
^^^^^^^^^^

*Category*: Filter. +
*Filter*: Subvalue is equal to +x+ in type and value. +
*Note*: Unlikely to work as desired with float values.  A +near+ function may be added in the future. +
*Note*: Lists are never equal, i.e., +(eq [1 2 3] [[1 2 3]])+ is +[]+, not +[[1 2 3]]+.  This may be changed in the future.

[[p.ne]]
+(ne x v)+
^^^^^^^^^^

*Category*: Filter. +
*Filter*: Subvalue is equal to +x+ in type and value. +
*Note*: See <<p.eq, +eq+>> for related discussion.

[[p.lt]]
+(lt n v)+
^^^^^^^^^^

*Arguments*: +n+ must be a number of float. +
*Filter*: Number or float and less than +n+.

[[p.le]]
+(le n v)+
^^^^^^^^^^

*Arguments*: +n+ must be a number of float. +
*Filter*: Number or float and less than or equal to +n+.

[[p.gt]]
+(gt n v)+
^^^^^^^^^^

*Arguments*: +n+ must be a number of float. +
*Filter*: Number or float and greater than +n+.

[[p.ge]]
+(ge n v)+
^^^^^^^^^^

*Arguments*: +n+ must be a number of float. +
*Filter*: Number or float and greater than or equal to +n+.

[[p.typed]]
+(typed t v)+
^^^^^^^^^^^^^

*Arguments*: +t+ must be a string literal and: +\'number'+, +\'float'+, +\'list'+, or +\'string'+. +
*Filter*: Type as described by +t+.

[[p.named]]
+(named n v)+
^^^^^^^^^^^^^

*Arguments*: +n+ must be a string. +
*Filter*: Has name +n+.

[[p.namedi]]
+(namedi n v)+
^^^^^^^^^^^^^^

*Arguments*: +n+ must be a string. +
*Filter*: Has name +n+, possibly with case differences.

[[p.sub]]
+(sub n v)+
^^^^^^^^^^^

Sub is an alias for <<p.namedi, +namedi+>>.

[[p.namedRx]]
+(namedRx n v)+
^^^^^^^^^^^^^^^

*Arguments*: +n+ must be a string literal and a valid regexp. +
*Filter*: Has name matching +n+.

[[p.longer]]
+(longer n v)+
^^^^^^^^^^^^^^

*Category*: Filter. +
*Arguments*: +n+ must be a number. +
*Filter*: Subvalue is list of more than +n+ elements.

*Transformations*::
  +(longer n v) -> v+ if +n+ is 0.

[[s.predicates]]
Predicates
~~~~~~~~~~

Predicates test their primary arguments are return true or false best on the result.

[[p.isLonger]]
+(isLonger n v)+
^^^^^^^^^^^^^^^

*Arguments*: +n+ must be a number. +
*Result*: false until +n+ is finished; then false until +v+ is a list with more than +n+ elements, then true. +
*Finished*: +n+ is finished and either is true or +v+ is a non-list.

[[p.isFinished]]
+(isFinished v)+
^^^^^^^^^^^^^^^^

*Result*: false until +v+ is finished, then true. +
*Finished*: +v+ is finished.

[[p.isLiteral]]
+(isLiteral v)+
^^^^^^^^^^^^^^^

*Result*: N/A +
*Finished*: N/A

*Transformations*::
  +(isLiteral v) -> ''+ if +v+ is a literal. +
  +(isLiteral v) -> :+ if +v+ is not a literal.

[[p.isList]]
+(isList v)+
^^^^^^^^^^^^

*Result*: false while +v+ is +:+, then true if +v+ is a list and false otherwise. +
*Finished*: +v+ is finished. +
*Note*: +isList+ is one way to distinguish between the falsy values +:+ and +[]+.

Math
~~~~

[[p.add]]
+(add a b)+
^^^^^^^^^^^

*Category*: Map. +
*Arguments*: +a+ must be a float or number. +
*Map*: +n:x -> n:(a+x)+ if +x+ is numeric and +x+ otherwise. +
*Note*: Result will be float if either side is a float.

[[p.neg]]
+(neg a)+
^^^^^^^^^

*Category*: Map. +
*Map*: +n:x -> n:(-x)* if +x+ is numeric and +x+ otherwise.

[[p.mult]]
+(mult a b)+
^^^^^^^^^^^^

*Category*: Map. +
*Arguments*: +a+ must be a float or number. +
*Map*: +n:x -> n:(a*x)+ if +x+ is numeric and +x+ otherwise. +
*Note*: Result will be float if either side is a float.

[[p.recip]]
+(recip a)+
^^^^^^^^^^^

*Category*: Map. +
*Map*: +n:x -> n:(1/x)* if +x+ is numeric and +x+ otherwise. +
*Note*: Result is always a float.

[[p.max]]
+(max v)+
^^^^^^^^^

*Arguments*: +v+ must be a list. +
*Result*: +:+ until +v+ is finished, then largest numeric element of +v+ or +:+ if no such element. +
*Finished*: +v+ is finished. +
*Note*: On ties, the first maximum element will be the result. +
*Note*: To compare results from two functions, use <<p.cat, +cat+>>, e.g., +(max (cat (ref \'a') (ref \'b')))+.

[[p.min]]
+(min v)+
^^^^^^^^^

*Arguments*: +v+ must be a list. +
*Result*: +:+ until +v+ is finished, then smallest numeric element of +v+ or +:+ if no such element. +
*Finished*: +v+ is finished. +
*Note*: On ties, the first minimum element will be the result. +
*Note*: To compare results from two functions, use <<p.cat, +cat+>>, e.g., +(min (cat (ref \'a') (ref \'b')))+.


Phase
~~~~~

These are specialized functions used to closely control when evaluation occurs.

A phase is specified via a literal strings describing an IronBee phase.  Valid values are:

- +REQUEST_HEADER+
- +REQUEST_HEADER_PROCESS+
- +REQUEST+
- +REQUEST_PROCESS+
- +RESPONSE_HEADER+
- +RESPONSE_HEADER_PROCESS+
- +RESPONSE+
- +RESPONSE_PROCESS+
- +POSTPROCESS+

WARNING: These functions never transform into literals.  Only use them on arguments that are known to be dynamic, e.g., expressions involving IronBee functions.

[[p.waitPhase]]
+(waitPhase p v)+
^^^^^^^^^^^^^^^^^

*Result*: +:+ until evaluated in phase +p+ and +v+ from then on. +
*Finished*: Phase is +p+ or later and +v+ is finished. +
*Note*: It is possible that +v+ will be evaluated before phase +p+ if it appears in another expression. +

[[p.finishPhase]]
+(finishPhase p v)+
^^^^^^^^^^^^^^^^^^^

*Result*: +v+ until phase +p+ and the value of +v+ at phase +p+ from then on. +
*Finished*: +v+ is finished or phase is +p+ or later. +
*Note*: This function makes a copy of the value of +v+ at phase +p+.  This copy can be a significant performance cost for complicated values.

[[s.ironbee]]
IronBee
~~~~~~~

These functions allow interaction with IronBee.  In particular, they allow the use of IronBee rule components (transformations, operations, and vars).  They are the primary means by which external data enters Predicate.

[[p.var]]
+(var n)+
^^^^^^^^^

*Result*: +:+ if no var named +n+; value of var +n+ otherwise. +
*Finished*: For non-list values, as soon as they have a value.  For list values, when the var reaches its final phase. +
*Note*: +var+ never transforms. +
*Warning*: Vars are not required to have a final phase.  As such, this function may never be finished.  +
*Warning*: Vars may not obey value semantics; in particular, they may change value.  The behavior of the var function with such vars is undefined. +

[[p.var2]]
+(var n w f)+
^^^^^^^^^^^^^

This function behaves as <<p.var, var>> except that it assumes that the var has a wait phase of +w+ and a final phase of +f+.  These assumptions are not enforced.  To enforce behavior, see <<p.waitPhase, waitPhase>> and <<p.finishPhase, finishPhase>>.  This function is primarily for modules that adds vars without properly registering wait and final phases.

[[p.ask]]
+(ask p v)+
^^^^^^^^^^^

*Result*: +:+ if +v+ is not a list.  Otherwise, value of asking collection +v+ with parameter +p+. +
*Finished*: +v+ is finished. +
*Note*: +v+ never transforms. +
*Note*: This function is only useful for asking dynamic collections for values.  Such collections are provided by modules.

[[p.operator]]
+(operator n s v)+ +(foperator n s v)+
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

*Category*: Map for +operator+; Filter for +foperator+. +
*Arguments*: +n+ and +s+ must be literals. +
*Map*: Apply operator named +n+ with parameter +s+ to each subvalue and take value of capture if true and +:+ if false. +
*Filter*: Apply operator named +n+ with parameter +s+ and test if operator returns true.

[[p.transformation]]
+(transformation n s v)+
^^^^^^^^^^^^^^^^^^^^^^^^

*Category*: Map. +
*Arguments*: +n+ and +s+ must be literals. +
*Map*: Apply transformation named +n+ with parameter +s+ to each subvalue.

[[s.development]]
Development
~~~~~~~~~~~

These functions assist with testing Predicate or developing Predicate expressions.  They are not intend for use in production.

[[p.p]]
+(p ...)+
^^^^^^^^^

*Arguments*: Must have at least one child. +
*Result*: Value of last argument. +
*Finished*: Last argument is finished. +
*Note*: Will output the value of each argument to stderr at every evaluation.

[[p.sequence]]
+(sequence s e d)+ +(sequence s e)+
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

*Arguments*: If +d+ is omitted, it is treated as +1+. +
*Result*: +[s s+d s+2d ... e]+. +
*Finished*: When the entire range is produced. +
*Note*: Appends a single value at each evaluation. +
*Note*: +d+ can be negative. +
*Note*: Infinite ranges are possible, e.g., by having +d+ positive and +s > e+.

[[p.identity]]
+(identity v)+
^^^^^^^^^^^^^^

*Result*: +v+ +
*Finished*: When +v+ is. +
*Note*: This function never transforms.  In contrast, +(cat v)+ is semantically equivalent, but does transform.

[[s.templates]]
Templates
~~~~~~~~~

Templates provide basic user defined substitution transformations.  They permit complex expressions to be expressed as simple expressions, allowing for improved error messages and fewer bytes in certain forms.  Ultimately, they expand out to full expressions tree, have subexpressions merged with all other expressions, and are treated no differently that had they been written out fully to begin with.

Templates are defined as a name, a list of parameters, and an expression.  The result is a new function named name.  When called, that function binds its arguments to the list of parameters and transforms based on the expression.  The expression can refer to the parameters via the <<p.ref, +ref+>> function.

[[p.ref]]
+(ref s)+
^^^^^^^^^

*Result*: N/A +
*Finished*: N/A +
*Transformations:*: Transforms into argument to parameter named +s+.

Index
-----

include::reference_index.txt[]
