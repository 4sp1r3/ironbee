// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clipp.proto

#ifndef PROTOBUF_clipp_2eproto__INCLUDED
#define PROTOBUF_clipp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace IronBee {
namespace CLIPP {
namespace PB {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_clipp_2eproto();
void protobuf_AssignDesc_clipp_2eproto();
void protobuf_ShutdownFile_clipp_2eproto();

class Transaction;
class Input;

// ===================================================================

class Transaction : public ::google::protobuf::Message {
 public:
  Transaction();
  virtual ~Transaction();

  Transaction(const Transaction& from);

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transaction& default_instance();

  void Swap(Transaction* other);

  // implements Message ----------------------------------------------

  Transaction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes raw_request = 1;
  inline bool has_raw_request() const;
  inline void clear_raw_request();
  static const int kRawRequestFieldNumber = 1;
  inline const ::std::string& raw_request() const;
  inline void set_raw_request(const ::std::string& value);
  inline void set_raw_request(const char* value);
  inline void set_raw_request(const void* value, size_t size);
  inline ::std::string* mutable_raw_request();
  inline ::std::string* release_raw_request();

  // optional bytes raw_response = 2;
  inline bool has_raw_response() const;
  inline void clear_raw_response();
  static const int kRawResponseFieldNumber = 2;
  inline const ::std::string& raw_response() const;
  inline void set_raw_response(const ::std::string& value);
  inline void set_raw_response(const char* value);
  inline void set_raw_response(const void* value, size_t size);
  inline ::std::string* mutable_raw_response();
  inline ::std::string* release_raw_response();

  // @@protoc_insertion_point(class_scope:IronBee.CLIPP.PB.Transaction)
 private:
  inline void set_has_raw_request();
  inline void clear_has_raw_request();
  inline void set_has_raw_response();
  inline void clear_has_raw_response();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* raw_request_;
  ::std::string* raw_response_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_clipp_2eproto();
  friend void protobuf_AssignDesc_clipp_2eproto();
  friend void protobuf_ShutdownFile_clipp_2eproto();

  void InitAsDefaultInstance();
  static Transaction* default_instance_;
};
// -------------------------------------------------------------------

class Input : public ::google::protobuf::Message {
 public:
  Input();
  virtual ~Input();

  Input(const Input& from);

  inline Input& operator=(const Input& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Input& default_instance();

  void Swap(Input* other);

  // implements Message ----------------------------------------------

  Input* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Input& from);
  void MergeFrom(const Input& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string local_ip = 1;
  inline bool has_local_ip() const;
  inline void clear_local_ip();
  static const int kLocalIpFieldNumber = 1;
  inline const ::std::string& local_ip() const;
  inline void set_local_ip(const ::std::string& value);
  inline void set_local_ip(const char* value);
  inline void set_local_ip(const char* value, size_t size);
  inline ::std::string* mutable_local_ip();
  inline ::std::string* release_local_ip();

  // required uint32 local_port = 2;
  inline bool has_local_port() const;
  inline void clear_local_port();
  static const int kLocalPortFieldNumber = 2;
  inline ::google::protobuf::uint32 local_port() const;
  inline void set_local_port(::google::protobuf::uint32 value);

  // required string remote_ip = 3;
  inline bool has_remote_ip() const;
  inline void clear_remote_ip();
  static const int kRemoteIpFieldNumber = 3;
  inline const ::std::string& remote_ip() const;
  inline void set_remote_ip(const ::std::string& value);
  inline void set_remote_ip(const char* value);
  inline void set_remote_ip(const char* value, size_t size);
  inline ::std::string* mutable_remote_ip();
  inline ::std::string* release_remote_ip();

  // required uint32 remote_port = 4;
  inline bool has_remote_port() const;
  inline void clear_remote_port();
  static const int kRemotePortFieldNumber = 4;
  inline ::google::protobuf::uint32 remote_port() const;
  inline void set_remote_port(::google::protobuf::uint32 value);

  // repeated .IronBee.CLIPP.PB.Transaction transaction = 5;
  inline int transaction_size() const;
  inline void clear_transaction();
  static const int kTransactionFieldNumber = 5;
  inline const ::IronBee::CLIPP::PB::Transaction& transaction(int index) const;
  inline ::IronBee::CLIPP::PB::Transaction* mutable_transaction(int index);
  inline ::IronBee::CLIPP::PB::Transaction* add_transaction();
  inline const ::google::protobuf::RepeatedPtrField< ::IronBee::CLIPP::PB::Transaction >&
      transaction() const;
  inline ::google::protobuf::RepeatedPtrField< ::IronBee::CLIPP::PB::Transaction >*
      mutable_transaction();

  // optional string id = 6;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 6;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();

  // @@protoc_insertion_point(class_scope:IronBee.CLIPP.PB.Input)
 private:
  inline void set_has_local_ip();
  inline void clear_has_local_ip();
  inline void set_has_local_port();
  inline void clear_has_local_port();
  inline void set_has_remote_ip();
  inline void clear_has_remote_ip();
  inline void set_has_remote_port();
  inline void clear_has_remote_port();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* local_ip_;
  ::std::string* remote_ip_;
  ::google::protobuf::uint32 local_port_;
  ::google::protobuf::uint32 remote_port_;
  ::google::protobuf::RepeatedPtrField< ::IronBee::CLIPP::PB::Transaction > transaction_;
  ::std::string* id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_clipp_2eproto();
  friend void protobuf_AssignDesc_clipp_2eproto();
  friend void protobuf_ShutdownFile_clipp_2eproto();

  void InitAsDefaultInstance();
  static Input* default_instance_;
};
// ===================================================================


// ===================================================================

// Transaction

// optional bytes raw_request = 1;
inline bool Transaction::has_raw_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transaction::set_has_raw_request() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transaction::clear_has_raw_request() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transaction::clear_raw_request() {
  if (raw_request_ != &::google::protobuf::internal::kEmptyString) {
    raw_request_->clear();
  }
  clear_has_raw_request();
}
inline const ::std::string& Transaction::raw_request() const {
  return *raw_request_;
}
inline void Transaction::set_raw_request(const ::std::string& value) {
  set_has_raw_request();
  if (raw_request_ == &::google::protobuf::internal::kEmptyString) {
    raw_request_ = new ::std::string;
  }
  raw_request_->assign(value);
}
inline void Transaction::set_raw_request(const char* value) {
  set_has_raw_request();
  if (raw_request_ == &::google::protobuf::internal::kEmptyString) {
    raw_request_ = new ::std::string;
  }
  raw_request_->assign(value);
}
inline void Transaction::set_raw_request(const void* value, size_t size) {
  set_has_raw_request();
  if (raw_request_ == &::google::protobuf::internal::kEmptyString) {
    raw_request_ = new ::std::string;
  }
  raw_request_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transaction::mutable_raw_request() {
  set_has_raw_request();
  if (raw_request_ == &::google::protobuf::internal::kEmptyString) {
    raw_request_ = new ::std::string;
  }
  return raw_request_;
}
inline ::std::string* Transaction::release_raw_request() {
  clear_has_raw_request();
  if (raw_request_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = raw_request_;
    raw_request_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes raw_response = 2;
inline bool Transaction::has_raw_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transaction::set_has_raw_response() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transaction::clear_has_raw_response() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transaction::clear_raw_response() {
  if (raw_response_ != &::google::protobuf::internal::kEmptyString) {
    raw_response_->clear();
  }
  clear_has_raw_response();
}
inline const ::std::string& Transaction::raw_response() const {
  return *raw_response_;
}
inline void Transaction::set_raw_response(const ::std::string& value) {
  set_has_raw_response();
  if (raw_response_ == &::google::protobuf::internal::kEmptyString) {
    raw_response_ = new ::std::string;
  }
  raw_response_->assign(value);
}
inline void Transaction::set_raw_response(const char* value) {
  set_has_raw_response();
  if (raw_response_ == &::google::protobuf::internal::kEmptyString) {
    raw_response_ = new ::std::string;
  }
  raw_response_->assign(value);
}
inline void Transaction::set_raw_response(const void* value, size_t size) {
  set_has_raw_response();
  if (raw_response_ == &::google::protobuf::internal::kEmptyString) {
    raw_response_ = new ::std::string;
  }
  raw_response_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transaction::mutable_raw_response() {
  set_has_raw_response();
  if (raw_response_ == &::google::protobuf::internal::kEmptyString) {
    raw_response_ = new ::std::string;
  }
  return raw_response_;
}
inline ::std::string* Transaction::release_raw_response() {
  clear_has_raw_response();
  if (raw_response_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = raw_response_;
    raw_response_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Input

// required string local_ip = 1;
inline bool Input::has_local_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Input::set_has_local_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Input::clear_has_local_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Input::clear_local_ip() {
  if (local_ip_ != &::google::protobuf::internal::kEmptyString) {
    local_ip_->clear();
  }
  clear_has_local_ip();
}
inline const ::std::string& Input::local_ip() const {
  return *local_ip_;
}
inline void Input::set_local_ip(const ::std::string& value) {
  set_has_local_ip();
  if (local_ip_ == &::google::protobuf::internal::kEmptyString) {
    local_ip_ = new ::std::string;
  }
  local_ip_->assign(value);
}
inline void Input::set_local_ip(const char* value) {
  set_has_local_ip();
  if (local_ip_ == &::google::protobuf::internal::kEmptyString) {
    local_ip_ = new ::std::string;
  }
  local_ip_->assign(value);
}
inline void Input::set_local_ip(const char* value, size_t size) {
  set_has_local_ip();
  if (local_ip_ == &::google::protobuf::internal::kEmptyString) {
    local_ip_ = new ::std::string;
  }
  local_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Input::mutable_local_ip() {
  set_has_local_ip();
  if (local_ip_ == &::google::protobuf::internal::kEmptyString) {
    local_ip_ = new ::std::string;
  }
  return local_ip_;
}
inline ::std::string* Input::release_local_ip() {
  clear_has_local_ip();
  if (local_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = local_ip_;
    local_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 local_port = 2;
inline bool Input::has_local_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Input::set_has_local_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Input::clear_has_local_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Input::clear_local_port() {
  local_port_ = 0u;
  clear_has_local_port();
}
inline ::google::protobuf::uint32 Input::local_port() const {
  return local_port_;
}
inline void Input::set_local_port(::google::protobuf::uint32 value) {
  set_has_local_port();
  local_port_ = value;
}

// required string remote_ip = 3;
inline bool Input::has_remote_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Input::set_has_remote_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Input::clear_has_remote_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Input::clear_remote_ip() {
  if (remote_ip_ != &::google::protobuf::internal::kEmptyString) {
    remote_ip_->clear();
  }
  clear_has_remote_ip();
}
inline const ::std::string& Input::remote_ip() const {
  return *remote_ip_;
}
inline void Input::set_remote_ip(const ::std::string& value) {
  set_has_remote_ip();
  if (remote_ip_ == &::google::protobuf::internal::kEmptyString) {
    remote_ip_ = new ::std::string;
  }
  remote_ip_->assign(value);
}
inline void Input::set_remote_ip(const char* value) {
  set_has_remote_ip();
  if (remote_ip_ == &::google::protobuf::internal::kEmptyString) {
    remote_ip_ = new ::std::string;
  }
  remote_ip_->assign(value);
}
inline void Input::set_remote_ip(const char* value, size_t size) {
  set_has_remote_ip();
  if (remote_ip_ == &::google::protobuf::internal::kEmptyString) {
    remote_ip_ = new ::std::string;
  }
  remote_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Input::mutable_remote_ip() {
  set_has_remote_ip();
  if (remote_ip_ == &::google::protobuf::internal::kEmptyString) {
    remote_ip_ = new ::std::string;
  }
  return remote_ip_;
}
inline ::std::string* Input::release_remote_ip() {
  clear_has_remote_ip();
  if (remote_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = remote_ip_;
    remote_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 remote_port = 4;
inline bool Input::has_remote_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Input::set_has_remote_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Input::clear_has_remote_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Input::clear_remote_port() {
  remote_port_ = 0u;
  clear_has_remote_port();
}
inline ::google::protobuf::uint32 Input::remote_port() const {
  return remote_port_;
}
inline void Input::set_remote_port(::google::protobuf::uint32 value) {
  set_has_remote_port();
  remote_port_ = value;
}

// repeated .IronBee.CLIPP.PB.Transaction transaction = 5;
inline int Input::transaction_size() const {
  return transaction_.size();
}
inline void Input::clear_transaction() {
  transaction_.Clear();
}
inline const ::IronBee::CLIPP::PB::Transaction& Input::transaction(int index) const {
  return transaction_.Get(index);
}
inline ::IronBee::CLIPP::PB::Transaction* Input::mutable_transaction(int index) {
  return transaction_.Mutable(index);
}
inline ::IronBee::CLIPP::PB::Transaction* Input::add_transaction() {
  return transaction_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IronBee::CLIPP::PB::Transaction >&
Input::transaction() const {
  return transaction_;
}
inline ::google::protobuf::RepeatedPtrField< ::IronBee::CLIPP::PB::Transaction >*
Input::mutable_transaction() {
  return &transaction_;
}

// optional string id = 6;
inline bool Input::has_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Input::set_has_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Input::clear_has_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Input::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Input::id() const {
  return *id_;
}
inline void Input::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Input::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Input::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Input::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* Input::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PB
}  // namespace CLIPP
}  // namespace IronBee

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_clipp_2eproto__INCLUDED
