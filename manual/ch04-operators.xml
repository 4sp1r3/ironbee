<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:svg="http://www.w3.org/2000/svg" xmlns:m="http://www.w3.org/1998/Math/MathML"
    xmlns:html="http://www.w3.org/1999/xhtml" xml:id="operators">
    <title>Operators</title>
    <para>...</para>
    <section>
        <title>pm</title>
        <para>Implements a set-based (or parallel) matching function using the Aho-Corasick
            algorithm. The parameter of the operator contains one or more matching patterns,
            separated with whitespace. Set-based matching is capable of matching many patterns at
            the same time, making it efficient for cases when the number of patterns is very large
            (in hundreds and thousands).</para>
        <programlisting>Rule REQUEST_HEADERS:User-Agent "@pm one two three"</programlisting>
        <para>If the <literal>capture</literal> modifier is specified on a <literal>@pm</literal>
            rule, the <literal>TX.0</literal> variable will contain the matched data fragment. Do
            note that, because the <literal>pm</literal> operator can easily match many times per
            rule, the <literal>TX.0</literal> value is valid only when used in the same rule. In the
            following rules, <literal>TX.0</literal> will contain the data fragment of the last
                <literal>@pm</literal> match.</para>
        <section>
            <title>Consolidation of @pm rules</title>
            <para>With the <literal>pm</literal> operator, not only can you manually parallelize the
                matching of a large number of patterns, but the engine itself will seamlessly
                consolidate multiple parallel matching rules when they use identical inputs. The
                goal is to minimize the number of separate matching operations and thus increase
                performance.</para>
            <para>This feature is very useful for rule qualification. Rule sets will often contain
                many rules with complex PCRE regular expressions, and running all of them often
                requires substantial effort. However, it is often possible to identify simpler
                patterns that are more efficient and which can be used to quickly determine if the
                complex PCRE pattern has a chance of matching. With seamless parallelization of
                    <literal>@pm</literal> rules, rule qualification is even more efficient.</para>
            <para>For example, let's start with two complex regular expression patterns that we want
                to speed up:</para>
            <programlisting>Rule ARGS "@rx complexPattern1" id:1
Rule ARGS "@rx complexPattern2" id:"</programlisting>
            <para>To add rule qualification, for each complex pattern we determine a simple pattern
                that can be fed to the pm operator. We then convert the standalone rules into
                chained rules, using the <literal>@pm</literal> operator with the simple pattern
                first, followed by the original rules:</para>
            <programlisting>Rule ARGS "@pm simplePattern1" chain,id:1
Rule ARGS "@rx complexPattern1"

Rule ARGS "@pm simplePattern2" chain,id:2
Rule ARGS "@rx complexPattern2"</programlisting>
            <para>In the above case, the engine will detect two <literal>@pm</literal> rules that
                apply to the same input (<literal>ARGS</literal>), and consolidate them into a
                single internal <literal>@pm</literal> rule. When this internal rule is run, its
                results will be saved and reused as needed. As a result, the complex patterns will
                be attempted only when there is a reason to believe they will match. If the simple
                patterns are well selected, that will happen only on a fraction of all
                transactions.</para>
            <para>Notes:</para>
            <itemizedlist>
                <listitem>
                    <para>Consolidation operates on identical inputs, which means the same variables
                        with the same transformation pipeline.</para>
                </listitem>
                <listitem>
                    <para>The <literal>MATCHED_VARS</literal> collection can be used to continue
                        inspection only on the inputs where the initial patterns matched.</para>
                </listitem>
            </itemizedlist>
            <warning>
                <para>This is an experimental feature, which we may need to tweak as we gain better
                    understanding of its advantages and disadvantages.</para>
            </warning>            
        </section>
    </section>
    <section>
        <title>pmf</title>
        <para>Same as <literal>pm</literal>, but instead of accepting parameters directly, it loads
            them from the file whose filename was supplied. The file is expected to contain one
            pattern per line. To convert a line into a pattern, whitespace from the beginning and
            the end is removed. Empty lines are ignored, as are comments, which are lines that begin
            with <literal>#</literal>. Relative filenames are resolved from same directory as the
            configuration file.</para>
        <programlisting>Rule REQUEST_HEADERS:User-Agent "@pmf bad_user_agents.dat"</programlisting>
    </section>
    <section>
        <title>rx</title>
        <para>The <literal>rx</literal> operator implements <link xlink:href="http://www.pcre.org/"
                >PCRE</link> regular expressions. The parameter of the operator is a regular
            expression pattern that is passed to the PCRE library without modification.</para>
        <programlisting>SecRule ARGS:userId "!@rx ^[0-9]+$"</programlisting>
        <para>Patterns are compiled with the following settings:</para>
        <itemizedlist>
            <listitem>
                <para>Entire input is treated as a single buffer against which matching is
                    done.</para>
            </listitem>
            <listitem>
                <para>Patterns are case-sensitive by default.</para>
            </listitem>
            <listitem>
                <para>Patterns are compiled with <literal>PCRE_DOTALL</literal> and
                        <literal>PCRE_DOLLAR_ENDONLY</literal> set.</para>
            </listitem>
        </itemizedlist>
        <section>
            <title>Using captured substrings to create variables</title>
            <para>Regular expressions can be used to capture substrings. In IronBee, the captured
                substrings can be used to create new variables in the <literal>TX</literal>
                collection. To use this feature, specify the <literal>capture</literal> modifier in
                the rule.</para>
            <programlisting>Rule ARGS "@rx (\d{13,16})" capture</programlisting>
            <para>When capture is enabled, IronBee will always create a variable
                    <literal>TX.0</literal>, which will contain the entire matching area of the
                pattern. Anonymous capture groups will create up to 9 variables, from
                    <literal>TX.1</literal> to <literal>TX.9</literal>. These special
                    <literal>TX</literal> variables will remain available until the next capture
                rule is run, when they will all be deleted.</para>
            <para>The use of named capture groups is recommended to assign meaningful names to
                data.</para>
        </section>
    </section>
</chapter>
