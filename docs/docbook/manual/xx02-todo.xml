<?xml version="1.0" encoding="UTF-8"?>
<appendix version="5.0" xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:svg="http://www.w3.org/2000/svg" xmlns:m="http://www.w3.org/1998/Math/MathML"
    xmlns:html="http://www.w3.org/1999/xhtml" xml:id="todo">
    <title>Ideas For Future Improvements</title>
    <para>This document contains the list of things we want to look into.</para>
    <para><emphasis role="bold">Reminder (to ourselves): We will not add features unless we can
            demonstrate clear need.</emphasis></para>
    <section>
        <title>Directive: AuditLogPart</title>
        <para>Syntax if/when we want to support configurable parts, and multiple instances of the
            same part (with different names):</para>
        <para><literal>AuditLogPart [+|-]partType [partName][; param=value]</literal></para>
    </section>
    <section>
        <title>Directive: Include</title>
        <itemizedlist>
            <listitem>
                <para>Brian wants to support only Unix path separators (but why not just use
                    whatever works on current platform?).</para>
            </listitem>
            <listitem>
                <para>Ivan wants to consider syntax that would allow configuration to retrieved from
                    sources other than the filesystem (e.g., from a database).</para>
            </listitem>
            <listitem>
                <para>Consider using optional parameters to restrict what can be in the included
                    files</para>
            </listitem>
        </itemizedlist>
    </section>
    <section>
        <title>Directive: Hostname</title>
        <para>Add support for URI-based mapping.</para>
        <para>Need to validate domain names that we accept.</para>
        <para>Our configuration files are in UTF-8 -- do we want to support international domain
            names (and convert them into punycode)?</para>
    </section>
    <section>
        <title>Directive: LoadModule</title>
        <para>Support many instances of the same module:</para>
        <programlisting>LoadModule /path/to/module.so moduleName</programlisting>
        <para>Module name is optional. When not provided, the filename with extension removed is
            used as the name.</para>
        <para>Some ideas to support module parameters, should we need to do it later on:</para>
        <programlisting>&lt;LoadModule /path/to/module.so>
    Param paramName1 paramValue1
    Param paramName2 paramValue2

    &lt;Param paramName3>
        # value3 here, free-form
    &lt;/Param>

    Param paramName4 @file:/path/to/file/with/paramValue4
&lt;/LoadModule></programlisting>
        <para>Modules should be able to hook into the engine in the correct order relative to other
            modules, but should manual tweaking be needed, we could use the following:</para>
        <programlisting>&lt;LoadModule /path/to/module.so>
    HookPriority hookName PRIORITY_FIRST "beforeModule1, beforeModule2" "afterModule1, afterModule2"
&lt;/LoadModule></programlisting>
    </section>
    <section>
        <title>Directive: Site</title>
        <para>Enable variable expansion in site names. The idea is to avoid overlap when managing
            multiple sensors. For example:</para>
        <programlisting>&lt;Site %{sensorName}.default>
    # Site definition
&lt;/Site></programlisting>
        <para>On the other hand, this type of site name manipulation can be performed in the
            management component. Why should a sensor care about what other sensors' sites are
            called?</para>
        <para>Sites should be viewed primarily as a way of identifying (and mapping to) real-life
            entities. They should be used to reduce clutter and map multiple hostnames into a single
            name, and to use different policies with potentially different group in charge of every
            entity.</para>
    </section>
    <section>
        <title>Directive: DebugLogLevel</title>
        <para>Extend DebugLogLevel to use different levels for different parts of the engine (e.g.,
            on per-module basis)</para>
    </section>
    <section>
        <title>Directive: SensorName</title>
        <para>Explicitly configure sensor name. If omitted, use hostname.</para>
    </section>
    <section>
        <title>Directive: RequestParamsExtra</title>
        <para>Extract parameters transported in the request URI. The parameter supplied to this
            directive should be a regular expression with named captures. On a match, the named
            captures will be placed in the <literal>ARGS_EXTRA</literal> collection. A new effective
            path will be constructed (using back references?).</para>
    </section>
    <section>
        <title>Variable: ARGS_URI</title>
        <para>Request parameters extracted from request URI.</para>
    </section>
    <section>
        <title>Modules</title>
        <para><emphasis role="bold">Description:</emphasis> Establishes a configuration section for
            module loading (NOTE: Is this really needed???)</para>
        <para><emphasis role="bold">Syntax:</emphasis>
            <literal>&lt;Modules>...&lt;/Modules></literal></para>
        <para><emphasis role="bold">Default:</emphasis> None</para>
        <para><emphasis role="bold">Context:</emphasis> Main</para>
        <para><emphasis role="bold">Version:</emphasis> Not Implemented Yet</para>
        <para>Modules can be specified only from within the <literal>Modules</literal>
            container:</para>
        <programlisting>&lt;Modules>
    LoadModule /path/to/module1.so
    LoadModule /path/to/module2.so
&lt;/Modules></programlisting>
    </section>
    <section>
        <title>Variable length</title>
        <para>To find out how many bytes there are in a variable:</para>
        <programlisting>#REQUEST_URI</programlisting>
        <para>Applied to a collection, the length operator will return the lengths of all variables
            in it.</para>
    </section>
    <section>
        <title>Special single-variable syntax</title>
        <para>In addition to the colon operator described in the previous section, collections
            support the comma operator, which returns exactly one variable or no variables at all.
            This is an advanced operator with dynamic behavior.</para>
        <programlisting>ARGS.name</programlisting>
        <para>In most cases, the comma operator will simply return the first matching variable in a
            collection (or nothing, if no matching variable can be found). However, when applied to
                <literal>ARGS</literal>, this operator may return a value that depends on the
            underlying platform that's being protected. More accurately, the functioning of the
            operator depends on the current <firstterm>parsing personality</firstterm>. Parsing
            personalities are designed to mimic the parsing implementation of backend systems in
            order to minimize a problem known as <firstterm>impedance mismatch</firstterm>. The
            issue is that, when faced with multiple parameters with the same name, some platforms
            return the first parameter, some platforms return the last parameter, and some platforms
            even return a combined value of all parameters with the same name. </para>
    </section>
    <section>
        <title>Consolidation of @pm rules</title>
        <para>With the <literal>pm</literal> operator, not only can you manually parallelize the
            matching of a large number of patterns, but the engine itself will seamlessly
            consolidate multiple parallel matching rules when they use identical inputs. The goal is
            to minimize the number of separate matching operations and thus increase
            performance.</para>
        <para>This feature is very useful for rule qualification. Rule sets will often contain many
            rules with complex PCRE regular expressions, and running all of them often requires
            substantial effort. However, it is often possible to identify simpler patterns that are
            more efficient and which can be used to quickly determine if the complex PCRE pattern
            has a chance of matching. With seamless parallelization of <literal>@pm</literal> rules,
            rule qualification is even more efficient.</para>
        <para>For example, let's start with two complex regular expression patterns that we want to
            speed up:</para>
        <programlisting>Rule ARGS "@rx complexPattern1" id:1
Rule ARGS "@rx complexPattern2" id:"</programlisting>
        <para>To add rule qualification, for each complex pattern we determine a simple pattern that
            can be fed to the pm operator. We then convert the standalone rules into chained rules,
            using the <literal>@pm</literal> operator with the simple pattern first, followed by the
            original rules:</para>
        <programlisting>Rule ARGS "@pm simplePattern1" chain,id:1
Rule ARGS "@rx complexPattern1"

Rule ARGS "@pm simplePattern2" chain,id:2
Rule ARGS "@rx complexPattern2"</programlisting>
        <para>In the above case, the engine will detect two <literal>@pm</literal> rules that apply
            to the same input (<literal>ARGS</literal>), and consolidate them into a single internal
                <literal>@pm</literal> rule. When this internal rule is run, its results will be
            saved and reused as needed. As a result, the complex patterns will be attempted only
            when there is a reason to believe they will match. If the simple patterns are well
            selected, that will happen only on a fraction of all transactions.</para>
        <para>Notes:</para>
        <itemizedlist>
            <listitem>
                <para>Consolidation operates on identical inputs, which means the same variables
                    with the same transformation pipeline.</para>
            </listitem>
            <listitem>
                <para>The <literal>MATCHED_VARS</literal> collection can be used to continue
                    inspection only on the inputs where the initial patterns matched.</para>
            </listitem>
        </itemizedlist>
        <warning>
            <para>This is an experimental feature, which we may need to tweak as we gain better
                understanding of its advantages and disadvantages.</para>
        </warning>
    </section>
    <section>
        <title>standalone</title>
        <para><emphasis role="bold">Description:</emphasis> Parallel matching with patterns from
            file.</para>
        <para><emphasis role="bold">Cardinality</emphasis>: 0..1</para>
        <para><emphasis role="bold">Module:</emphasis> core</para>
        <para><emphasis role="bold">Version:</emphasis> 0.2</para>
        <para>Marks rule as standalone, which means that the engine is allowed to move it anywhere
            within the phase if it wishes to optimize execution.</para>
        <programlisting>Rule ARGS "@rx TEST" phase:REQUEST,standalone</programlisting>
    </section>
    <section>
        <title>sqlDecode</title>
        <para>Decodes input in a way similar to how a DBMS would:</para>
        <itemizedlist>
            <listitem>
                <para>Decodes hexadecimal literals that use the SQL standard format
                        <literal>x'HEX_ENCODED_VALUE'</literal> (case insensitive)</para>
            </listitem>
            <listitem>
                <para>Decodes hexadecimal literals that use the ODBC format
                        <literal>0xHEX_ENCODED_VALUE</literal> (case insensitive)</para>
            </listitem>
            <listitem>
                <para>Decodes backslash-escaped characters</para>
            </listitem>
        </itemizedlist>
        <para>References:</para>
        <itemizedlist>
            <listitem>
                <para>MySQL Reference: Hexadecimal Literals
                    http://dev.mysql.com/doc/refman/5.6/en/hexadecimal-literals.html</para>
            </listitem>
            <listitem>
                <para>String Literals
                    http://dev.mysql.com/doc/refman/5.6/en/string-literals.html</para>
            </listitem>
        </itemizedlist>
    </section>
</appendix>
