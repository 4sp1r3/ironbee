<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:svg="http://www.w3.org/2000/svg" xmlns:m="http://www.w3.org/1998/Math/MathML"
    xmlns:html="http://www.w3.org/1999/xhtml" xml:id="introduction">
    <title>Introduction</title>
    <para>IronBee is a framework and library for building a Web Application Firewall (WAF). The
        following components make up the IronBee framework:<itemizedlist>
            <listitem>
                <para>IronBee Library: The primary component containing the inspection
                    engine.</para>
            </listitem>
            <listitem>
                <para>IronBee Modules: Extensions to the inspection engine in the form of loadable
                    shared libraries defined by the IronBee configuration.</para>
            </listitem>
            <listitem>
                <para>Server Components: The server is the executable driving the inspection engine.
                    This can be a standard executable, such as the command line tool, or in the form
                    of a plugin such as the Apache trafficserver plugin and httpd module.</para>
            </listitem>
            <listitem>
                <para>Configuration: There are two sets of configuration. The IronBee library must
                    be loaded and bootstrapped via the native server configuration (for example, a
                    commandline option, Trafficserver plugin configuration or httpd module
                    configuration). In addition, the IronBee Library must be configured via its own
                    configuration file(s).</para>
            </listitem>
        </itemizedlist></para>
    <section>
        <title>Software Installation</title>
        <para>IronBee source is available from github.</para>
        <para>https://github.com/ironbee/ironbee</para>
        <para>The source follows standard build conventions,
            typically:<programlisting>./configure --prefix=/usr/local/ironbee
make
make check
sudo make install</programlisting>Various
            options are available for customization through the configure script.  A full list of
            these options are available
            with:<programlisting>./configure --help</programlisting></para>
    </section>
    <section>
        <title>Configuration</title>
        <para>First, the server component must be configured to load the IronBee library and its
            configuration. This is done through the server's native configuration and differs for
            each server. See the Configuration Examples section for examples of the server
            configuration. Once loaded, IronBee configuration consists of one or more configuration
            files which IronBee will load.</para>
        <para>IronBee configuration file examples are listed in the Configuration Examples
            section.</para>
    </section>
    <section>
        <title>Inspection</title>
        <para>The IronBee library is fed data by the server. This server could be a command line
            tool (see clipp), or through an HTTP web server or proxy. IronBee will expose data via
            fields. A data field specifies a name, type and value which can then be used for
            inspection via rules. Rules can be simple signatures against fields, a chained set of
            operations, stream based matchers or even lua scripts. Each rule can inspect fields and
            perform actions.</para>
        <section>
            <title>Data Fields</title>
            <para>IronBee supports two primary types of data fields:</para>
            <itemizedlist>
                <listitem>
                    <para><emphasis>Scalars</emphasis>, which can contain data of various types
                        (strings, numbers or streams)</para>
                </listitem>
                <listitem>
                    <para><emphasis>Collections</emphasis>, which contain zero or more
                        scalars</para>
                </listitem>
            </itemizedlist>
            <para>Fields that are created using external data (e.g., request parameters) can have
                any byte value used in their names, which are essentially binary strings. This is
                because we have to use whatever input data is provided to us.</para>
            <para>Fields that are created by configuration must use names that begin with an
                underscore or a letter, and are followed by zero or more letter, digit, underscore,
                and dash characters. The only allowed letters are from the A-Z range (irrespective
                of the case, as these names are case-insensitive).</para>
            <para>The names of built-in fields are written using all uppercase letters by
                convention.</para>
            <section>
                <title>Addressing Fields</title>
                <para>How you're using fields depends on the context. The rules, for example,
                    typically accept one or more target fields, which means that you can give a rule
                    a scalar field (e.g., <emphasis>REQUEST_URI</emphasis>) or a collection field
                    (e.g., <emphasis>ARGS</emphasis>). When you give a rule a collection, it will
                    extract all scalar fields out of it.</para>
                <para>You can also choose to be more specific, either because the logic of the rule
                    requires it, or because you are using a field in a context that does not accept
                    collections.</para>
                <note>
                    <para>As of version 0.6.0, the <literal>[n]</literal> syntax described here is
                        not yet implemented.</para>
                </note>
                <para>To select the second field in a collection:</para>
                <programlisting>ARGS[2]</programlisting>
                <para>To select the last field in a collection:</para>
                <programlisting>ARGS[-1]</programlisting>
                <para>A collection can contain multiple scalar fields with the same name. You can
                    use the colon operator to filter out only the named fields:</para>
                <programlisting>ARGS:username</programlisting>
                <para>If you wish you can also select only a specific occurrence of the field. The
                    following returns the first <literal>username</literal> parameter from request
                    parameters:</para>
                <programlisting>ARGS:username[1]</programlisting>
                <para>Sometimes you will need to deal with parameters whose full names you don't
                    know in advance. For such cases we support selection using regular expression
                    patterns. The following selects all fields whose names begin with "user".</para>
                <programlisting>ARGS:/^user/</programlisting>
                <para>If, on the other hand, you know the field name but it contains unusual
                    characters (e.g., a colon, or a bracket), you can quote the entire name using
                    single quotes and then use most characters without fear of breaking
                    anything:</para>
                <programlisting>ARGS:'name[]'</programlisting>
                <para>Alternatively, you can use the escape syntax to "deactivate" unusual
                    characters:</para>
                <programlisting>ARGS:name\x5b\x5d</programlisting>
            </section>
            <section>
                <title>Field Transformations</title>
                <para>Field data often may need to be transformed or normalized before it can be
                    used. This is accomplished via transformations. These transformations can be
                    applied to individual fields or to all fields within a rule. For appying
                    transformations to all fields in a rule, see the <literal>t</literal> rule
                    modifier, which is essentially a shorthand notation for applying the same
                    transformation to each individual field. For individual fields, this is done via
                    a dot
                    syntax.<programlisting>ARGS.lowercase()
ARGS:name.lowercase()</programlisting></para>
                <para>In addition to manipulating the field value, a transformation may also change
                    the field type. For example, from a collection or string to a
                    number.<programlisting># Collection size: Collection to number
ARGS.size()

# Field data length: String to number
REQUEST_HEADERS:User-Agent.length()</programlisting></para>
            </section>
            <section>
                <title>Field Expansion</title>
                <para>Sometimes there's a need to use a variable, or some value derived from a
                    variable, in text strings, such as adding raw values for logging via the
                        <literal>logdata</literal> rule modifier. This can be achieved using field
                    expansion. For example:</para>
                <programlisting>logdata:%{NAME}</programlisting>
                <para>If the expression resolves to only one variable, the entire
                        <literal>%{NAME}</literal> expression will be replaced with the field value. </para>
                <caution>
                    <para>What if the field is not a scalar? Perhaps the value could be JSON or
                        similar format?</para>
                </caution>
            </section>
        </section>
        <section>
            <title>Rules</title>
            <para>IronBee currently defines three types of rules. There is a basic pattern matching
                rule language, a more limited streaming version of the pattern matching rule
                language, as well as the ability to specify more complex rules which syntax is
                processed external to the configuration file. Currently the only external rule type
                is via the Lua scripting language, but more may be handled in the future. In
                addition to external rules, the rule processing engine and configuration syntax are
                decoupled, allowing modules to be developed to provide alternate custom rules which
                interact with the same rule engine.</para>
            <section>
                <title>Basic Matching Rules</title>
                <para>Basic matching rules are configured via the <literal>Rule</literal> directive.
                    These rules include a list of fields containing the data to be inspected, an
                    operator with parameter to perform the inspection, and modifiers which specify
                    metadata attributes as well as any actions to be taken if there is a
                    match.<programlisting>Rule REQUEST_HEADERS ARGS @rx "Some.*Pattern" id:1 rev:1 phase:REQUEST event block:phase</programlisting></para>
                <para>Basic matching rules will iterate through the list of fields (and sub-fields
                    within collections), executing the specified operator and performing any
                    required actions. When the rule executes depends on both the specified phase as
                    well as the order in which the rule is specified in the configuration.</para>
                <para>The phase information, assigned to the rule via the phase modifier, determines
                    when a rule will run within transaction lifecycle. Within a phase, configuration
                    determines how rules are ordered. When a rule is read from the configuration
                    files, it is appended to the list of rules in the desired phase. At run-time,
                    the engine will process the rules one by one, and all of them until it is
                    interrupted.</para>
            </section>
            <section>
                <title>Stream Matching Rules</title>
                <para>While the basic matching rules are quite flexible, they are limited to
                    executing only once in the given phase. With this limitation, you can only
                    inspect data that is available at the time of execution. To do this effectivly,
                    the data must be buffered so that it can all be inspected in a single pass.
                    Streaming inspection allows you to avoid buffering potentially large amounts of
                    data by inspecting the data in smaller chunks. With this, however, comes many
                    restrictions.</para>
                <para>The StreamInspect directive allows inspecting a limited set of fields
                    (currently only the raw request and response bodies as of version 0.6) in
                    smaller chunks as the data arrives. Instead of the rule executing only a single
                    time, it may instead execute many times - once for each chunk of data. Because
                    of this, stream based rules do not have a phase associated with them. In
                    addition to this difference from the basic matching rules, stream based rules
                    cannot be transformed and allow only a limited set of operators (currenly
                        <literal>dfa</literal>, <literal>pm</literal> and <literal>pmf</literal> as
                    of version
                    0.6).<programlisting>StreamInspect REQUEST_BODY_STREAM @dfa "(?i)Content-Disposition(?:[^\r\n]*)attachment|form-data|filename" \
    id:1 rev:1 "msg:Possible file upload" event</programlisting></para>
            </section>
            <section>
                <title>External Rules</title>
                <para>Due to the simple rule syntax and confines of the configuration language, both
                    basic and stream matching rules only allow for basic logic. Some more advanced
                    logic can be obtained through soe advanced features such as rule chaining,
                    however when more full control is required, external rules are available.
                    External rules refer to a rule external to the configuration language and can
                    thus be much more expressive. Currently the Lua scripting language is available
                    through external rules via the <literal>RuleExt</literal>
                    directive.<programlisting>RuleExt lua:example.lua id:1 rev:1 phase:REQUEST_HEADER</programlisting><programlisting>-- example.lua
local t = ...
local ib = t.ib

-- This must be defined before assignment
-- so that the self-recursive call uses
-- the local variable instead of a global.
local printValues
local k
local v

-- Create a local function for printing values
printValues = function(name,value)
  if value then
    if type(value) == 'table' then
      -- Print the table.
      for k,v in pairs(value) do
        printValues(name.."."..k, v)
      end
    else
      print(name.."="..value)
    end
  end
end

-- Create a local function to fetch/print fields
local fieldPrint = function(name)
  printValues(name, ib:get(name))
end

-- Print out all the available fields
for k,v in pairs(ib:getFieldList()) do
  fieldPrint(v)
end

-- Return the result (0:FALSE >1:TRUE) to the rule engine
return 0</programlisting></para>
            </section>
            <section>
                <title>Common Rule Components</title>
                <para>Most rules share a common set of metadata attributes as well as
                    actions.</para>
                <section>
                    <title>Metadata</title>
                    <para>Rule metadata is specified using the following modifiers:</para>
                    <itemizedlist>
                        <listitem>
                            <para><literal>id</literal> - globally unique identifier, in the form
                                    <literal>vendorPrefix/vendorRuleId</literal>. Example:
                                    <literal>ib/10001</literal>. Vendor prefix is a word that can
                                contain any ASCII letter or digit, as well as the colon character.
                                The colon should be used by vendors to differentiate among rule
                                sets. For example: <literal>ib:default/10001</literal> and
                                    <literal>ib:extra/10001</literal> represent two separate rules,
                                each belonging to a different set.</para>
                        </listitem>
                        <listitem>
                            <para><literal>rev</literal> - revision (or serial), which is used to
                                differentiate between two versions of the same rule; it defaults to
                                1 if not specified.</para>
                        </listitem>
                        <listitem>
                            <para><literal>msg</literal> - message that will be used when the rule
                                triggers. Rules that generate events must define a message.</para>
                        </listitem>
                        <listitem>
                            <para><literal>ref</literal> - contains URL that provides additional
                                documentation for the rule; it is best practice to provide complete
                                documentation for the rule on the publisher's web site; multiple
                                references are allowed (NOTE: This is not yet implemented).</para>
                        </listitem>
                        <listitem>
                            <para><literal>tag</literal> - assigns one or more tags to the rule;
                                tags are used to classify rules and events (as events inherit all
                                tags from the rule that generates them). Tag values must be
                                constructed from ASCII letters, digits, and underscore characters.
                                The forward slash character is used to establish a tag
                                hierarchy.</para>
                        </listitem>
                        <listitem>
                            <para><literal>phase</literal> - determines when the rule will run (Not
                                available in streaming rules as these are triggered on new
                                data)</para>
                        </listitem>
                        <listitem>
                            <para><literal>severity</literal> - determines the seriousness of the
                                finding (0-100)</para>
                        </listitem>
                        <listitem>
                            <para><literal>confidence</literal> - determines the confidence the rule
                                has in its logic (0-100)</para>
                        </listitem>
                    </itemizedlist>
                </section>
            </section>
        </section>
        <section>
            <title>Events</title>
            <para>During a transaction, one or more events may be generated (see the
                    <literal>event</literal> action). Each event has the following attributes - many
                of which is controlled by the rule metadata.<variablelist>
                    <varlistentry>
                        <term>Event ID</term>
                        <listitem>
                            <para>Uniquely generated (for the transaction) event identifier</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>Event Type</term>
                        <listitem>
                            <para>Type of event. Currently this is one of:<variablelist>
                                    <varlistentry>
                                        <term>Observation</term>
                                        <listitem>
                                            <para>An event which may contribute to a further
                                                decision.</para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                        <term>Alert</term>
                                        <listitem>
                                            <para>An event which denotes the transaction should be
                                                logged.</para>
                                        </listitem>
                                    </varlistentry>
                                </variablelist></para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>Rule ID</term>
                        <listitem>
                            <para>The rule which created the event, if it was generated by a
                                rule.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>Field(s)</term>
                        <listitem>
                            <para>A optional list of inspected fields which contributed to the
                                event.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>Tag(s)</term>
                        <listitem>
                            <para>An optional list of tags used to classify the event.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>Data</term>
                        <listitem>
                            <para>Arbitrary data associated with the event. This is to be treated as
                                opaque and will be accompanied with a length in bytes.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>Message</term>
                        <listitem>
                            <para>A text message associated with the event.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>Confidance</term>
                        <listitem>
                            <para>A positive integer value ranging from 0-100 denoting the percent
                                of confidance that the event is accurate.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>Severity</term>
                        <listitem>
                            <para>A positive integer value ranging from 0-100 denoting the severity
                                (weight) that this event may pose if accurate.</para>
                        </listitem>
                    </varlistentry>
                </variablelist><variablelist>
                    <varlistentry>
                        <term>Recommended Action</term>
                        <listitem>
                            <para>The event creator is recommending an action to be taken. This is
                                currently one of:<variablelist>
                                    <varlistentry>
                                        <term>Log</term>
                                        <listitem>
                                            <para>Log the transaction.</para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                        <term>Block</term>
                                        <listitem>
                                            <para>Block the transaction.</para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                        <term>Ignore</term>
                                        <listitem>
                                            <para>Allow the transaction without further
                                                inspection.</para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                        <term>Allow</term>
                                        <listitem>
                                            <para>Allow the transaction, but continue
                                                inspecting.</para>
                                        </listitem>
                                    </varlistentry>
                                </variablelist></para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>Suppression</term>
                        <listitem>
                            <para>Denotes the event should be suppressed and for what reason.
                                Currently this is one of:<variablelist>
                                    <varlistentry>
                                        <term>None</term>
                                        <listitem>
                                            <para>The event is not to be supressed.</para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                        <term>False Positive</term>
                                        <listitem>
                                            <para>The event was determined to be a false
                                                positive.</para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                        <term>Replaced</term>
                                        <listitem>
                                            <para>The event was replace with a later event.</para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                        <term>Incomplete</term>
                                        <listitem>
                                            <para>The event may contain incomplete information or be
                                                based off of incomplete information.</para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                        <term>Other</term>
                                        <listitem>
                                            <para>The event was supressed for an unspecified
                                                reason.</para>
                                        </listitem>
                                    </varlistentry>
                                </variablelist></para>
                        </listitem>
                    </varlistentry>
                </variablelist></para>
        </section>
        <section>
            <title>Request and Response Body Handling</title>
            <para>Request and response headers are generally limited in size and thus easy to
                handle. This is especially true in a proxy deployment, where buffering is possible.
                Proxies will typically cache request and response headers, making it easy to perform
                inspection and reliably block when necessary.</para>
            <para>The situation is different with request and response bodies, which can be quite
                big. For example, request bodies may carry one or more files; response bodies too
                often deliver files, and some HTML responses can get quite big too. Even when sites
                do not normally have large request bodies, they are under the control of attackers,
                and they may intentionally submit large amounts of data in an effort to bypass
                inspection.</para>
            <para>Let's look of what might be of interest here:</para>
            <variablelist>
                <varlistentry>
                    <term>Inspection</term>
                    <listitem>
                        <para>Do we want to inspect a particular request or response body? Whereas
                            it would be rare not to want inspect a request body, it's quite common
                            with response bodies, because many carry static files and images. We can
                            decide by looking at the <literal>Content-Type</literal> header.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Processing</term>
                    <listitem>
                        <para>After we decide to inspect a body, we need to determine how to process
                            it, after which inspection can take place. It's only in the simplest
                            case, when the body is treated as a continuous stream of bytes, is that
                            no processing is needed. Content types such as
                                <literal>application/x-www-form-urlencoded</literal> and
                                <literal>multipart/form-data</literal> must be parsed before
                            fine-grained analysis can be undertaken. In many cases we may need to
                            process a body in more than one way to support all the desired
                            approaches to analysis.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Buffering</term>
                    <listitem>
                        <para>Reliable blocking is possible only when all of the data is buffered:
                            accumulate the entire request (or response) until the inspection is
                            complete, and then you release it all once. Blocking without buffering
                            can be effective, but such approach is susceptible to evasion in edge
                            cases. The comfort of reliable blocking comes at a price. End user
                            performance may degrade, because rather than receiving data as it
                            becomes available, the proxy must wait to receive the last byte of the
                            data to let it through. In some cases (e.g., WebSockets) there is an
                            expectation that chunks of data travel across the wire without delay.
                            And, of course, buffering increases memory consumption required for
                            inspection.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Logging</term>
                    <listitem>
                        <para>Finally, we wish to be able to log entire transaction for
                            post-processing or evidence. This is easy to do when all of data is
                            buffered, but it should also be possible even when buffering is not
                            enabled.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <section>
                <title>Request body processing</title>
                <para>IronBee comes with built-in logic that controls the default handling of
                    request body data. It will correctly handle
                        <literal>application/x-www-form-urlencoded</literal> and
                        <literal>multipart/form-data</literal> requests. Other formats will be added
                    as needed.</para>
            </section>
        </section>
    </section>
</chapter>
