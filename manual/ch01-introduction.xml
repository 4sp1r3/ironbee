<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:svg="http://www.w3.org/2000/svg" xmlns:m="http://www.w3.org/1998/Math/MathML"
    xmlns:html="http://www.w3.org/1999/xhtml" xml:id="introduction">
    <title>Introduction</title>
    <para>...</para>
    <section>
        <title>Configuration</title>
        <para>IronBee configuration consists of one or more configuration files. The following rules
            apply:</para>
        <para>
            <itemizedlist>
                <listitem>
                    <para>Configuration files are in Unicode and stored as UTF-8</para>
                </listitem>
                <listitem>
                    <para>Escape sequences as in JavaScript (section 7.8.4 in ECMA-262), except
                        within PCRE regular expression patterns, where PCRE escaping is used</para>
                </listitem>
                <listitem>
                    <para>Lines that begin with <literal>#</literal> are comments</para>
                </listitem>
                <listitem>
                    <para>Line continuation when <literal>\</literal> is the last character on a
                        line</para>
                </listitem>
            </itemizedlist>
        </para>
    </section>
    <section>
        <title>Variables</title>
        <para>IronBee supports two types of variables:</para>
        <itemizedlist>
            <listitem>
                <para><emphasis>Scalar variables</emphasis>, which can contain data of any type
                    (effectively binary strings)</para>
            </listitem>
            <listitem>
                <para><emphasis>Collections</emphasis>, which contain zero or more scalar
                    variables</para>
            </listitem>
        </itemizedlist>
        <para>Variables that are created using external data (e.g., request parameters) can have any
            byte value used in their names, which are essentially binary strings. This is because we
            have to use whatever input data is provided to us.</para>
        <para>Variables that are created by configuration must use names that begin with an
            underscore or a letter, and are followed by zero or more letter, digit, underscore, and
            dash characters. The only allowed letters are from the A-Z range (irrespective of the
            case, because variable names are case-insensitive).</para>
        <para>The names of built-in variables and collections are written using all uppercase
            letters by convention.</para>
        <section>
            <title>Addressing variables</title>
            <para>How you're using variables depends on the context. The rules, for example,
                typically accept one or more variables, which means that you can give a rule a
                single variable (e.g., <emphasis>REQUEST_URI</emphasis>) or a collection (e.g.,
                    <emphasis>ARGS</emphasis>). When you give a rule a collection, it will extract
                all scalar variables out of it.</para>
            <para>You can also choose to be more specific, either because the logic of the rule
                requires it, or because you are using a variable in a context that does not accept
                collections.</para>
            <para>To select the second variable in a collection:</para>
            <programlisting>ARGS[2]</programlisting>
            <para>To select the last variable in a collection:</para>
            <programlisting>ARGS[-1]</programlisting>
            <para>A collection can contain multiple scalar variables with the same name. You can use
                the colon operator to filter out only the named variables:</para>
            <programlisting>ARGS:username</programlisting>
            <para>If you wish you can also select only a specific occurrence of the variable. The
                following returns the first <literal>username</literal> parameter from request
                parameters:</para>
            <programlisting>ARGS:username[1]</programlisting>
            <para>Sometimes you will need to deal with parameters whose full names you don't know in
                advance. For such cases we support selection using regular expression patterns. The
                following selects all variables whose names begin with "user".</para>
            <programlisting>ARGS:/^user/</programlisting>
            <para>If, on the other hand, you know the variable name but it contains unusual
                characters (e.g., a colon, or a bracket), you can quote the entire name using single
                quotes and then use most characters without fear of breaking anything:</para>
            <programlisting>ARGS:'name[]'</programlisting>
            <para>Alternatively, you can use the escape syntax to "deactivate" unusual
                characters:</para>
            <programlisting>ARGS:name\x5b\x5d</programlisting>
        </section>
        <section>
            <title>Special single-variable syntax</title>
            <para>In addition to the colon operator described in the previous section, collections
                support the comma operator, which returns exactly one variable or no variables at
                all. This is an advanced operator with dynamic behavior.</para>
            <programlisting>ARGS.name</programlisting>
            <para>In most cases, the comma operator will simply return the first matching variable
                in a collection (or nothing, if no matching variable can be found). However, when
                applied to <literal>ARGS</literal>, this operator may return a value that depends on
                the underlying platform that's being protected. More accurately, the functioning of
                the operator depends on the current <firstterm>parsing personality</firstterm>.
                Parsing personalities are designed to mimic the parsing implementation of backend
                systems in order to minimize a problem known as <firstterm>impedance
                    mismatch</firstterm>. The issue is that, when faced with multiple parameters
                with the same name, some platforms return the first parameter, some platforms return
                the last parameter, and some platforms even return a combined value of all
                parameters with the same name. </para>
        </section>
        <section>
            <title>Variable expression expansion</title>
            <para>Sometimes there's a need to use a variable, or some value derived from a variable,
                in text strings. This can be achieved using variable expression expansion. For
                example:</para>
            <programlisting>%{VARNAME}</programlisting>
            <para>If the expression resolves to only one variable, the <literal>VARNAME</literal>
                part will be replaced with the variable value. If the expression resolves to more
                than one variable, the resulting string will be in JSON format.</para>
        </section>
        <section>
            <title>Collection size</title>
            <para>To find out how many variables there are in a collection:</para>
            <programlisting>&amp;ARGS</programlisting>
        </section>
    </section>
    <section>
        <title>Rules</title>
        <para/>
        <section>
            <title>Metadata</title>
            <para>Rule metadata is specified using the following modifiers:</para>
            <itemizedlist>
                <listitem>
                    <para><literal>id</literal> - globally unique identifier, in the form
                            <literal>vendorPrefix/vendorRuleId[-revision]</literal>. Example:
                            <literal>ib/10001-2</literal>. Vendor rule ID and revision must be
                        integers. Vendor prefix is a word that can contain any ASCII letter or
                        digit, as wel as the colon character. The colon should be used by vendors to
                        differentiate among rule sets. For example:
                            <literal>ib:default/10001-2</literal> and
                            <literal>ib:extra/10001-2</literal> represent two separate rules, each
                        belonging to a different set.</para>
                    <para>When a rule identifier is reported in the logs, an internal change counter
                        may appear at the end in brackets (for example: <literal>ib/10001-2
                            [3]</literal>). The internal change counter keeps track of the changes
                        made to the rule by configuration. The change counter will not be displayed
                        if there were no changes.</para>
                </listitem>
                <listitem>
                    <para><literal>rev</literal> - revision (or serial), which is used to
                        differentiate between two versions of the same rule; it defaults to 1 if not
                        specified; it is an error to specify revision in the <literal>id</literal>
                        and in <literal>rev</literal> labels at the same time</para>
                </listitem>
                <listitem>
                    <para><literal>msg</literal> - message that will be used when the rule triggers.
                        Rules that generate events must define a message.</para>
                </listitem>
                <listitem>
                    <para><literal>ref</literal> - contains URL that provides additional
                        documentation for the rule; it is best practice to provide complete
                        documentation for the rule on the publisher's web site; multiple references
                        are allowed</para>
                </listitem>
                <listitem>
                    <para><literal>tag</literal> - assigns one or more tags to the rule; tags are
                        used to classify rules and events (as events inherite all tags from the rule
                        that generates them). Tag values must be contructed from ASCII letters,
                        digits, and underscore characters. The forward slash character is used to
                        establish a tag hierarchy.</para>
                </listitem>
                <listitem>
                    <para><literal>phase</literal> - determines when the rule will run</para>
                </listitem>
                <listitem>
                    <para><literal>severity</literal> - determines the seriousness of the
                        finding</para>
                </listitem>
            </itemizedlist>
        </section>
        <section>
            <title>Phases</title>
            <para>Rule phase determines when a rule runs. IronBee understands the following
                phases:</para>
            <variablelist>
                <varlistentry>
                    <term><literal>REQUEST_HEADERS</literal> (1)</term>
                    <listitem>
                        <para>Invoked after all request headers have been read, but before reading
                            the request body (if any). Most rules should not this phase, opting for
                                <literal>REQUEST_BODY</literal> instead.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>REQUEST_BODY</literal> (2)</term>
                    <listitem>
                        <para>Invoked after receiving all request data, which may involve request
                            body and request trailers, but it will run even when neither is
                            present.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>REQUEST</literal> (2)</term>
                    <listitem>
                        <para>Alias for <literal>REQUEST_BODY</literal>. </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>RESPONSE_HEADERS</literal> (3)</term>
                    <listitem>
                        <para>Invoked after receiving response headers.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>RESPONSE_BODY</literal> (4)</term>
                    <listitem>
                        <para>Invoked after receiving response body (if any) and response trailers
                            (if any).</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para>For backward compatibility with ModSecurity rules, each phase can also be
                specified with a number from 1 to 4.</para>
            <section>
                <title>Rule ordering</title>
                <para>The phase information, assigned to every rule, determines when a rule will run
                    within transaction lifecycle. Within a phase, configuration determines how rules
                    are ordered. When a rule is read from the configuration files, it is appended to
                    the list of rules in the desired phase. At run-time, the engine will process the
                    rules one by one, and all of them until it is interrupted.</para>
                <para>There can be situations when the order of the rules may not correspond to the
                    order in which they appear in the configuration files, and that's when the order
                    is manipulated by the configuration. </para>
                <section>
                    <title>Standalone  rules</title>
                    <para>Standalone rules are those that do not depend on other rules and which are
                        safe to execute at any point within the phase. To mark a rule as standalone,
                        apply the <literal>standalone</literal> modifier to it:</para>
                    <programlisting>Rule ARGS "@rx TEST" phase:REQUEST,standalone</programlisting>
                    <para>When you mark a rule as standalone, the rule engine is free to move it
                        around to optimize the execution.</para>
                </section>
            </section>
        </section>
    </section>
    <section>
        <title>Events</title>
        <para>During a transaction, one or more events may be generated. Each event has the
            following mandatory attributes:</para>
        <itemizedlist>
            <listitem>
                <para>Event number; the first event in a transaction is assigned number 1, the
                    second number 2, and so on...</para>
            </listitem>
            <listitem>
                <para>Rule identifier</para>
            </listitem>
            <listitem>
                <para>Message</para>
            </listitem>
            <listitem>
                <para>Phase information (generated)</para>
            </listitem>
            <listitem>
                <para>Severity</para>
            </listitem>
            <listitem>
                <para>Suppression status [was the event suppressed]</para>
            </listitem>
        </itemizedlist>
        <para>Optional attributes:</para>
        <itemizedlist>
            <listitem>
                <para>Tags</para>
            </listitem>
            <listitem>
                <para>Reference URLs</para>
            </listitem>
            <listitem>
                <para>Data source (generated when applicable); parameter name</para>
            </listitem>
        </itemizedlist>
    </section>
    <section>
        <title>Request and Response Body Handling</title>
        <para>Request and response headers are generally limited in size and thus easy to handle.
            This is especially true in a proxy deployment, where buffering is possible. Proxies will
            typically cache request and response headers, making it easy to perform inspection and
            reliably block when necessary.</para>
        <para>The situation is different with request and response bodies, which can be quite big.
            For example, request bodies may carry one or more files; response bodies too often
            deliver files, and some HTML responses can get quite big too. Even when sites do not
            normally have large request bodies, they are under the control of attackers, and they
            may intentionally submit large amounts of data in an effort to bypass inspection.</para>
        <para>Let's look of what might be of interest here:</para>
        <variablelist>
            <varlistentry>
                <term>Inspection</term>
                <listitem>
                    <para>Do we want to inspect a particular request or response body? Whereas it
                        would be rare not to want inspect a request body, it's quite common with
                        response bodies, because many carry static files and images. We can decide
                        by looking at the <literal>Content-Type</literal> header.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Processing</term>
                <listitem>
                    <para>After we decide to inspect a body, we need to determine how to process it,
                        after which inspection can take place. It's only in the simplest case, when
                        the body is treated as a continuous stream of bytes, is that no processing
                        is needed. Content types such as
                            <literal>application/x-www-form-urlencoded</literal> and
                            <literal>multipart/form-data</literal> must be parsed before
                        fine-grained analysis can be underten. In many cases we may need to process
                        a body in more than one way to support all the desired approaches to
                        analysis.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Buffering</term>
                <listitem>
                    <para>Reliable blocking is possible only when all of the data is buffered:
                        accumulate the entire request (or response) until the inspection is
                        complete, and then you release it all once. Blocking without buffering can
                        be effective, but such approach is susceptible to evasion in edge cases. The
                        comfort of reliable blocking comes at a price. End user performance may
                        degrade, because rather than receiving data as it becomes available, the
                        proxy must wait to receive the last byte of the data to let it through. In
                        some cases (e.g., WebSockets) there is an expectation that chunks of data
                        travel across the wire without delay. And, of course, buffering increases
                        memory consumption required for inspection.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Logging</term>
                <listitem>
                    <para>Finally, we wish to be able to log entire transaction for post-processing
                        or evidence. This is easy to do when all of data is buffered, but it should
                        also be possible even when buffering is not enabled.</para>
                </listitem>
            </varlistentry>
        </variablelist>
        <section>
            <title>Request body processing</title>
            <para>IronBee comes with built-in logic that controls the default handling of request
                body data. It will correctly handle
                    <literal>application/x-www-form-urlencoded</literal> and
                    <literal>multipart/form-data</literal> requests. Other formats will be added as
                needed.</para>
        </section>
    </section>
</chapter>
