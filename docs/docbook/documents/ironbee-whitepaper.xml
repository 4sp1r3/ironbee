<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <info>
        <title>IronBee Open Source Web Application Firewall</title>
        <subtitle>Building a universal web application security sensor in the cloud</subtitle>
        <copyright>
            <year>2011</year>
            <holder>Qualys</holder>
        </copyright>
    </info>
    <section>
        <title>Introduction</title>
        <para>Qualys is announcing the development of IronBee, a new open source project to build a
            universal web application security sensor. Our desire is not only to build the code and
            the rules, but also to focus on building a community around the project. In fact, we
            believe that building the community is the most important aspect of the project and the
            only way to ensure that it has a long life.</para>
        <para>IronBee has been in development for several months now. We have completed the initial
            design phase and the prototype implementation, and we have the development and
            collaboration infrastructure ready. Now that we have a meaningful starting point, we are
            inviting others to join us.</para>
    </section>
    <section>
        <title>The Need for Web Application Security Monitoring</title>
        <para>Why do we need to monitor our web applications and provide additional protection
            measures? Because software today is inherently
            insecure<?oxy_insert_start author="nancy" timestamp="20110208T121442-0500"?>,<?oxy_insert_end?>
            and we need to manage the situation. Consider the following contributing factors:</para>
        <variablelist>
            <varlistentry>
                <term>Software engineering is immature</term>
                <listitem>
                    <para>We still have a long way to go until we learn how to build robust software
                        in a predictable and repeatable way. We are making good progress when it
                        comes to best practices, but the average developer still struggles.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Technology moves at a very fast pace</term>
                <listitem>
                    <para>Innovation drives companies forward, but features often come first, and
                        security is an afterthought. We are playing catch-up all the time.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Businesses must move quickly</term>
                <listitem>
                    <para>Security plays a relatively minor role in the success of a business, with
                        many other factors having far greater influence. There&#x2019;s a fine
                        balance between security, usability, and time to market. Businesses
                        generally focus on reaching the market as soon as possible, adopting a
                            <emphasis>we&#x2019;ll secure it if it succeeds</emphasis>
                        attitude.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Legacy applications</term>
                <listitem>
                    <para>Not only do we have a large backlog of existing applications, but because
                        of the very fast pace of development, our new applications become old
                        virtually as soon as we deploy them.</para>
                </listitem>
            </varlistentry>
        </variablelist>
        <para>But what does <emphasis>manage the situation</emphasis> mean? The answer depends on
            whom you ask. These are some of the common use cases for application security monitoring
            and defense:</para>
        <itemizedlist>
            <listitem>
                <para>Compliance</para>
            </listitem>
            <listitem>
                <para>Virtual patching (usually for custom applications)</para>
            </listitem>
            <listitem>
                <para>Protection against known exploits (usually for well-known applications)</para>
            </listitem>
            <listitem>
                <para>Application hardening (raising the bar)</para>
            </listitem>
            <listitem>
                <para>Real-time application security monitoring (also known as situational
                    awareness)</para>
            </listitem>
            <listitem>
                <para>Passive continuous vulnerability assessment</para>
            </listitem>
        </itemizedlist>
    </section>
    <section>
        <title>Toward a Universal Web Application Security Sensor</title>
        <para>We are proposing that the security community design, build, and deploy a universal
            application security sensor. We envision a flexible framework that will be used as a
            foundational building block by all those concerned with application security
            monitoring.</para>
        <para>Standardization will bring the following advantages:</para>
        <variablelist>
            <varlistentry>
                <term>Higher quality and development cost savings</term>
                <listitem>
                    <para>Developing an application security monitoring sensor is not a trivial job.
                        It requires substantial understanding of the key concepts, sustained
                        development effort, and security knowledge, as well as years of making and
                        fixing mistakes. It is an effort that requires extensive collaboration with
                        everyone in the security community. It is a job that is too big to do more
                        than once.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Universal availability</term>
                <listitem>
                    <para>Organizations often incorporate diverse components into their
                        infrastructures using different software products. They also outsource parts
                        of their infrastructure to others. Having the same application security
                        framework available across the board is the most efficient way for an
                        organization to retain security control.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Portability of security logic</term>
                <listitem>
                    <para>With universal availability of a common framework, we can approach the
                        ideal of <emphasis>write once, use everywhere</emphasis>. For example, a
                        rule that defends against a known problem in a popular web application can
                        be deployed everywhere, no matter what platform the application is deployed
                        on.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Information exchange</term>
                <listitem>
                    <para>By being able to target a single platform and freely exchange information
                        on application security attacks and defenses, we hope to create a thriving
                        ecosystem for information exchange.</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </section>
    <section>
        <title>It&#x2019;s All About the Community</title>
        <para>The success of IronBee depends on our ability to create the right conditions for the
            community to form&#8212;and to inspire others to join it. If we succeed, IronBee will
            flourish.</para>
        <para>There are two key aspects to this success:</para>
        <variablelist>
            <varlistentry>
                <term>Liberal open source license</term>
                <listitem>
                    <para>For a community to form and grow, everyone must be equal. Viral open
                        source licenses often exclude those with commercial interests and create
                        inequality (for example, when copyright assignment is required in order for
                        some code to become part of the official distribution). IronBee uses the
                        business-friendly Apache 2.0 software license and requires no copyright
                        assignment.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Sustainable community</term>
                <listitem>
                    <para>The license makes us community-ready, but we are also taking the next step
                        toward making the project fully public and transparent, as a proper open
                        source project should be. Furthermore, we are structuring the project to
                        support a variety of challenges and implementation tasks designed to match
                        the variety of interests and skills of the community&#8212;providing
                        opportunities for everyone.</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </section>
    <section>
        <title>Key Technical Directions</title>
        <para>These are our key technical directions:</para>
        <variablelist>
            <varlistentry>
                <term>Diversity of deployment modes</term>
                <listitem>
                    <para>There is no best way to deploy an application security sensor. Some people
                        love the embedded sensor approach for its scalability; others accept only
                        the reverse proxy approach because it provides full isolation. There are
                        many reasons why different deployment modes exist&#8212;some technical, some
                        philosophical. The truth is that the real world is messy and that we must
                        deal with it. IronBee will look at a variety of deployment modes: passive,
                        embedded, reverse proxy, command-line (for batch processing), and
                        out-of-process (in which traffic is shipped for inspection outside the
                        process or server of origin).</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Portability</term>
                <listitem>
                    <para>We use abstractions to make the bulk of the code independent from
                        environmental variations. Porting IronBee to a new environment (e.g., web
                        server or proxy) should require only the implementation of a very small
                        interface layer that deals with data acquisition.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Modularity</term>
                <listitem>
                    <para>Modularity is important for two reasons. First, new developers should be
                        able to implement their ideas quickly, without having to understand how the
                        project as a whole works. We will enable this ease of usage with good APIs
                        and documentation. Second, deployment-time modularity allows end-users and
                        packagers to customize the sensor to perform well in their own
                        environments.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Powerful functionality</term>
                <listitem>
                    <para>We are not forgetting the users. After all, the product must address the
                        core user needs in order to be successful. We are going to do this by
                        offering a range of features, each suitable for a particular requirement. We
                        will equally address security and usability needs with an easy-to-use
                        configuration language, advanced features for advanced users, and many
                        time-saving features on a high level of abstraction.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Technical quality</term>
                <listitem>
                    <para>At the end of the day, it is very important that the sensor is of high
                        quality&#8212;secure, robust, and efficient. Our source code is just that,
                        with fully automated cross-platform builds and unit and regression
                        testing.</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </section>
    <section>
        <title>Key Functional Directions</title>
        <para>IronBee implements a robust framework for application security monitoring and defense.
            It provides a layered set of features at different levels of abstraction, enabling its
            users to choose the approach that works best for the work they need to
            accomplish.</para>
        <para>What follows is our vision of the operation of the framework, which we will use as a
            starting point for determining the exact features we will implement:</para>
        <orderedlist>
            <listitem>
                <para>Flexible data acquisition options (i.e., deployment modes)</para>
            </listitem>
            <listitem>
                <para>Personality-based data processing that matches the parsing quirks in the
                    back-end</para>
            </listitem>
            <listitem>
                <para>A persistent data model that mirrors real-life entities such as applications,
                    sessions, users, and IP addresses and that allows both short-term and long-term
                    activity tracking</para>
            </listitem>
            <listitem>
                <para>Aggregation of historical data (from the internal data store) as well as the
                    information from external data sources, such as:</para>
                <orderedlist>
                    <listitem>
                        <para>Geolocation information</para>
                    </listitem>
                    <listitem>
                        <para>IP address reputation</para>
                    </listitem>
                </orderedlist>
            </listitem>
            <listitem>
                <para>User agent profiling</para>
            </listitem>
            <listitem>
                <para>An efficient data retrieval and transformation engine that provides
                    transparent optimization and rule prequalification, ensuring that no time is
                    spent on needless or repetitive work</para>
            </listitem>
            <listitem>
                <para>Multiple pattern matchers and support for streaming inspection</para>
            </listitem>
            <listitem>
                <para>A choice of approaches to implement custom security logic:</para>
                <orderedlist>
                    <listitem>
                        <para>Flexible rule language suitable for 80% of all work</para>
                    </listitem>
                    <listitem>
                        <para>A high-performing scripting platform (based on Lua) for the next
                            19%</para>
                    </listitem>
                    <listitem>
                        <para>Support for compiled modules for the 1% of cases in which performance
                            is of the highest importance</para>
                    </listitem>
                </orderedlist>
            </listitem>
            <listitem>
                <para>Inbound and outbound traffic analysis of:</para>
                <orderedlist>
                    <listitem>
                        <para>Protocol compliance (blacklisting and whitelisting)</para>
                    </listitem>
                    <listitem>
                        <para>Common attack techniques</para>
                    </listitem>
                    <listitem>
                        <para>Evasion techniques (on the protocol and application levels)</para>
                    </listitem>
                    <listitem>
                        <para>Known exploits</para>
                    </listitem>
                    <listitem>
                        <para>Protection for vulnerabilities in popular applications (via
                            whitelisting)</para>
                    </listitem>
                    <listitem>
                        <para>Virtual patching (via whitelisting)</para>
                    </listitem>
                    <listitem>
                        <para>Information leakage</para>
                    </listitem>
                    <listitem>
                        <para>Error message detection</para>
                    </listitem>
                </orderedlist>
            </listitem>
            <listitem>
                <para>Higher-level security modules:</para>
                <orderedlist>
                    <listitem>
                        <para>Behavioral monitoring of IP addresses, sessions, and users </para>
                    </listitem>
                    <listitem>
                        <para>Brute force detection</para>
                    </listitem>
                    <listitem>
                        <para>DoS and DDoS detection</para>
                    </listitem>
                    <listitem>
                        <para>Cookie encryption and signing</para>
                    </listitem>
                    <listitem>
                        <para>Content security policy enforcement</para>
                    </listitem>
                    <listitem>
                        <para>Passive vulnerabilty scanning</para>
                    </listitem>
                    <listitem>
                        <para>User experience monitoring</para>
                    </listitem>
                    <listitem>
                        <para>XML parsing and validation</para>
                    </listitem>
                </orderedlist>
            </listitem>
            <listitem>
                <para>Policy decisions</para>
            </listitem>
            <listitem>
                <para>Tailored defense</para>
            </listitem>
            <listitem>
                <para>Interaction with external security systems (e.g., firewalls) and data
                    exchange</para>
            </listitem>
        </orderedlist>
    </section>
    <section>
        <title>Rules</title>
        <para>Having a good framework is great, but it is important to couple the framework with an
            effective rule set that brings value to users across a broad spectrum:</para>
        <variablelist>
            <varlistentry>
                <term>Complete security coverage </term>
                <listitem>
                    <para>Rules should provide reasonably complete coverage of application security
                        issues.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Effectiveness</term>
                <listitem>
                    <para>Rules should achieve their targets of detecting and preventing attacks,
                        making it impossible (in some cases) or substantially more difficult (in
                        others) for attackers to succeed.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Low rate of false positives</term>
                <listitem>
                    <para>There should be a minimal and tolerable number of false positives to
                        handle.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Ease of use</term>
                <listitem>
                    <para>Choosing what rules to run, how to respond to events, and how to create
                        exceptions should not be a burden on administrators.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Documentation</term>
                <listitem>
                    <para>All rules should be well documented, with their purpose, coverage, and
                        side effects clearly explained.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Traceability</term>
                <listitem>
                    <para>Every rule must be traced back to a need, which will allow users to make
                        an informed decision about whether that rule is needed in their
                        environment.</para>
                </listitem>
            </varlistentry>
        </variablelist>
        <para>Whenever possible, we will aim to remain compatible with existing solutions.</para>
    </section>
    <section>
        <title>Status and Next Steps</title>
        <para>We will officially launch at 7:00 p.m. on February 14, 2011, in person at the Qualys
            booth (#1432) at the RSA conference in San Francisco and digitally on the IronBee web
            site and mailing lists. By that time, the project web site at <link
                xlink:href="https://www.ironbee.com">www.ironbee.com</link> will be up and running,
            consisting of the initial code drop as well as a complete development and collaboration
            infrastructure (source code repository, issue tracking, mailing lists, wiki, and so
            on).</para>
        <para>At this time, we are looking for early adopters and those who wish to participate in
            shaping the project:</para>
        <itemizedlist>
            <listitem>
                <para><emphasis role="bold">Developers</emphasis> to work on the IronBee core and on
                    the security modules</para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">Application defenders</emphasis> to tell us what they
                    need and to provide feedback on our proposed solutions (e.g., configuration
                    language, signature language)</para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">Application security researchers</emphasis> to exchange
                    attack information, to write signatures and rules, and to design new detection
                    and protection techniques</para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">Web server and proxy developers</emphasis> to help us
                    make IronBee work in their environments</para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">Distribution maintainers</emphasis> to package IronBee
                    to run on their systems</para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">Infrastructure and cloud providers</emphasis> to help
                    make IronBee effective for embedding into their infrastructures</para>
            </listitem>
        </itemizedlist>
        <note>
            <para>Even if you are not a developer or a security researcher, you can help us by
                telling us what you need to defend your web applications. By giving us your feedback
                early on, you will ensure that the project works for you when it approaches
                stability. Please join the discussion by signing up for the ironbee-devel mailing
                list (follow the link from the Contact section on <link
                    xlink:href="https://www.ironbee.com">www.ironbee.com</link>).</para>
        </note>
        <para>We are very excited to have this opportunity to work on a critical piece of security
            infrastructure in partnership with other members of the security community. We hope that
            you will share our enthusiasm and join us.</para>
    </section>
    <section>
        <title>Team</title>
        <para>The IronBee team consists of contributing members of the security community with years
            of experience with secure development, open source, and security research in the spheres
            of application security and intrusion detection:</para>
        <itemizedlist>
            <listitem>
                <para><emphasis role="bold">Ivan Ristic</emphasis> (project architect), who
                    previously envisioned, built, and supported ModSecurity for seven years.</para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">Brian Rectanus</emphasis> (lead developer), also a
                    former developer and maintainer of ModSecurity.</para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">Will Metcalf</emphasis> (community manager and testing),
                    a long-time open source developer involved with Snort, Suricata, and the
                    Emerging Threat rules.</para>
            </listitem>
        </itemizedlist>
        <para>We are still looking for the right person to join the team to work on the security
            research side.</para>
    </section>
    <section>
        <title>Schedule</title>
        <para>We don&#x2019;t have a strict development schedule at this time, as we want to allow time for
            experimentation before crucial design decisions are finalized and before we decide
            exactly what will go into the first release. The goal is to have a production-ready
            first version by the end of 2011.</para>
    </section>
    <section>
        <title>About Qualys</title>
        <para>Qualys, Inc. (<link xlink:href="http://www.qualys.com">www.qualys.com</link>) is the
            leading provider of on-demand IT security risk and compliance management solutions
            delivered as a service. Qualys&#x2019;s Software-as-a-Service solutions are deployed in a matter
            of hours anywhere in the world, providing customers with an immediate and continuous
            view of their security and compliance postures. The QualysGuard&#8482; service is used today by
            more than 3,500 organizations in 85 countries, including 40 of the Fortune Global 100;
            QualysGuard performs more than 200 million IP audits per year. Qualys has the largest
            vulnerability management deployment in the world at a Fortune Global 50 company. Qualys
            has established strategic agreements with leading managed service providers and
            consulting organizations, including BT, Etisalat, Fujitsu, IBM, I(TS)2, LAC,
            SecureWorks, Symantec, Tata Communications, TELUS, and VeriSign.</para>
        <para><emphasis>Copyright &#xa9; 2011 Qualys, Inc. All rights reserved.</emphasis></para>
    </section>
</article>
