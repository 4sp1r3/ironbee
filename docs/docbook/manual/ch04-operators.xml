<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:svg="http://www.w3.org/2000/svg" xmlns:m="http://www.w3.org/1998/Math/MathML"
    xmlns:html="http://www.w3.org/1999/xhtml" xml:id="operators">
    <title>Operators</title>
    <para>...</para>
    <section>
        <title>dfa</title>
        <para><emphasis role="bold">Description:</emphasis> Deterministic finite atomation matching
            algorithm (PCRE's alternative matching algorithm).</para>
        <para><emphasis role="bold">Module:</emphasis> core</para>
        <para><emphasis role="bold">Version:</emphasis> 0.4</para>
        <para>The <literal>dfa</literal> operator implements the alternative matching algorithm in
            the <link xlink:href="http://www.pcre.org/">PCRE</link> regular expressions library. The
            parameter of the operator is a regular expression pattern that is passed to the PCRE
            library without modification. This alternative matching algorithm uses a similar syntax
            to PCRE regular expressions, except that backtracking is not available. The primary use
            of <literal>dfa</literal> is to allow a subset of regular expression matching in a
            streaming manner (see <literal>StreamInspect</literal>). TODO: Describe limits on regex
            syntax.</para>
    </section>
    <section>
        <title>pm</title>
        <para><emphasis role="bold">Description:</emphasis> Parallel matching using the
                <literal>Aho-Corasick</literal> algorithm.</para>
        <para><emphasis role="bold">Module:</emphasis> core</para>
        <para><emphasis role="bold">Version:</emphasis> 0.2</para>
        <para>Implements a set-based (or parallel) matching function using the Aho-Corasick
            algorithm. The parameter of the operator contains one or more matching patterns,
            separated with whitespace. Set-based matching is capable of matching many patterns at
            the same time, making it efficient for cases when the number of patterns is very large
            (in hundreds and thousands).</para>
        <programlisting>Rule REQUEST_HEADERS:User-Agent "@pm one two three"</programlisting>
        <para>If the <literal>capture</literal> modifier is specified on a <literal>@pm</literal>
            rule, the <literal>TX.0</literal> variable will contain the matched data fragment. Do
            note that, because the <literal>pm</literal> operator can easily match many times per
            rule, the <literal>TX.0</literal> value is valid only when used in the same rule. In the
            following rules, <literal>TX.0</literal> will contain the data fragment of the last
                <literal>@pm</literal> match.</para>
    </section>
    <section>
        <title>pmf</title>
        <para><emphasis role="bold">Description:</emphasis> Parallel matching with patterns from
            file.</para>
        <para><emphasis role="bold">Module:</emphasis> core</para>
        <para><emphasis role="bold">Version:</emphasis> 0.2</para>
        <para>Same as <literal>pm</literal>, but instead of accepting parameters directly, it loads
            them from the file whose filename was supplied. The file is expected to contain one
            pattern per line. To convert a line into a pattern, whitespace from the beginning and
            the end is removed. Empty lines are ignored, as are comments, which are lines that begin
            with <literal>#</literal>. Relative filenames are resolved from same directory as the
            configuration file.</para>
        <programlisting>Rule REQUEST_HEADERS:User-Agent "@pmf bad_user_agents.dat"</programlisting>
    </section>
    <section>
        <title>rx</title>
        <para><emphasis role="bold">Description:</emphasis> Regular expression (perl compatible
            regular expression) matching.</para>
        <para><emphasis role="bold">Module:</emphasis> core</para>
        <para><emphasis role="bold">Version:</emphasis> 0.2</para>
        <para>The <literal>rx</literal> operator implements <link xlink:href="http://www.pcre.org/"
                >PCRE</link> regular expressions. The parameter of the operator is a regular
            expression pattern that is passed to the PCRE library without modification.</para>
        <programlisting>SecRule ARGS:userId "!@rx ^[0-9]+$"</programlisting>
        <para>Patterns are compiled with the following settings:</para>
        <itemizedlist>
            <listitem>
                <para>Entire input is treated as a single buffer against which matching is
                    done.</para>
            </listitem>
            <listitem>
                <para>Patterns are case-sensitive by default.</para>
            </listitem>
            <listitem>
                <para>Patterns are compiled with <literal>PCRE_DOTALL</literal> and
                        <literal>PCRE_DOLLAR_ENDONLY</literal> set.</para>
            </listitem>
        </itemizedlist>
        <section>
            <title>Using captured substrings to create variables</title>
            <para>Regular expressions can be used to capture substrings. In IronBee, the captured
                substrings can be used to create new variables in the <literal>TX</literal>
                collection. To use this feature, specify the <literal>capture</literal> modifier in
                the rule.</para>
            <programlisting>Rule ARGS "@rx (\d{13,16})" capture</programlisting>
            <para>When capture is enabled, IronBee will always create a variable
                    <literal>TX.0</literal>, which will contain the entire matching area of the
                pattern. Anonymous capture groups will create up to 9 variables, from
                    <literal>TX.1</literal> to <literal>TX.9</literal>. These special
                    <literal>TX</literal> variables will remain available until the next capture
                rule is run, when they will all be deleted.</para>
        </section>
    </section>
</chapter>
