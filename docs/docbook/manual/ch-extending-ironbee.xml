<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:svg="http://www.w3.org/2000/svg" xmlns:m="http://www.w3.org/1998/Math/MathML"
    xmlns:html="http://www.w3.org/1999/xhtml" xml:id="extending-ironbee">
    <title>Extending IronBee</title>
    <para>...</para>
    <section>
        <title>Overview</title>
        <para>...<warning>
                <para>This documentation is currently out of date.</para>
            </warning></para>
    </section>
    <section>
        <title>Execution Flow</title>
        <section>
            <title>Definitions</title>
            <variablelist>
                <varlistentry>
                    <term>Engine</term>
                    <listitem>
                        <para>The framework that controls data flow, state and code
                            execution.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Server Plugin</term>
                    <listitem>
                        <para>Server native code for embedding the engine into another software base
                            (e.g. the Apache httpd server). The plugin is responsible for
                            instantiating the engine, initiating the initial configuration process,
                            feeding the engine with data and optionally implementing methods of
                            blocking.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Hook</term>
                    <listitem>
                        <para>A hook is an execution point within the engine that allows external
                            code to be registered and executed as if it were part of the engine.
                            There are many builtin hooks in the IronBee engine and custom hooks can
                            also be added. Hooks are typically leveraged by modules.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Module</term>
                    <listitem>
                        <para>Engine code that is not essential to the core engine, but rather
                            extends what the engine can accomplish by hooking into it. Modules in
                            IronBee are dynamically loadable files which can extend and alter how
                            the engine executes. There are a number of different types of modules
                            which will be explained in detail. Some examples of modules are HTTP
                            parsers, matching algorithms, logging methods, rule languages/executors
                            and specialized detection techniques. All IronBee features are
                            essentially modules, which allows nearly every aspect of the engine to
                            be extended.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>
        <section>
            <title><?oxy_comment_start author="brectanus" timestamp="20110128T233116-0800" comment="This section needs to be updated as it is a bit outdated."?>Flow<?oxy_comment_end?></title>
            <para>There are four main stages of execution detailed below.</para>
            <section>
                <title>Startup Stage</title>
                <para>During startup, the plugin is instantiated by whatever server has loaded it,
                    for example when the Apache httpd server loads/configures the plugin. During
                    this stage, the plugin instantiates the engine and initiates the configuration stage.<orderedlist>
                        <listitem>
                            <para>Server starts and instantiates/starts the plugin.</para>
                        </listitem>
                        <listitem>
                            <para>Server Plugin is configured with native plugin configuration,
                                which includes the location of the engine configuration.</para>
                        </listitem>
                        <listitem>
                            <para>Engine is instantiated.</para>
                            <orderedlist>
                                <listitem>
                                    <para>An engine configuration context is created.</para>
                                </listitem>
                                <listitem>
                                    <para>Static core module is loaded.</para>
                                </listitem>
                            </orderedlist>
                        </listitem>
                        <listitem>
                            <para>Server Plugin registers a native logging provider.</para>
                        </listitem>
                        <listitem>
                            <para>Engine configuration stage is initiated based on initial plugin
                                configuration.</para>
                        </listitem>
                    </orderedlist></para>
            </section>
            <section>
                <title>Configuration Stage</title>
                <para>During configuration, the configuration files/scripts are read/executed,
                    engine modules are loaded/initialized and contexts are created/configured in
                    preparation for the runtime stage. The following is an outline of what will
                    happen during this stage.</para>
                <orderedlist>
                    <listitem>
                        <para>Configuration is read/executed.</para>
                    </listitem>
                    <listitem>
                        <para>The main configuration context is created.</para>
                    </listitem>
                    <listitem>
                        <para>Modules are loaded.<orderedlist>
                                <listitem>
                                    <para>Module global configuration data is copied to the global
                                        context as a base configuration.</para>
                                </listitem>
                                <listitem>
                                    <para>Module "init" function is called just after it is loaded
                                        to initialize any module configuration.</para>
                                </listitem>
                                <listitem>
                                    <para>Modules may hook into the engine by registering to be
                                        called when certain events occur.</para>
                                </listitem>
                                <listitem>
                                    <para>If successfully initialized, a module is registered with
                                        the engine.</para>
                                </listitem>
                            </orderedlist></para>
                    </listitem>
                    <listitem>
                        <para>Configuration contexts are created and registered.</para>
                    </listitem>
                    <listitem>
                        <para>Modules register themselves with a configuration context if they are
                            to be used in that context.</para>
                        <orderedlist>
                            <listitem>
                                <para>Module "context init" function is called to initialize any
                                    context configuration.</para>
                            </listitem>
                            <listitem>
                                <para>Modules may hook into the engine for the given context by
                                    registering to be called when certain events occur.</para>
                            </listitem>
                        </orderedlist>
                    </listitem>
                    <listitem>
                        <para>The runtime stage is initiated.</para>
                    </listitem>
                </orderedlist>
                <section>
                    <title>Runtime Stage</title>
                    <para>During runtime all of the configuration has been finalized and the engine
                        will now handle data passed to it by the plugin. Data is handled by the
                        state machine which essentially follows a five step process. First, a
                        configuration context is chosen. Second, the request is handled. Third the
                        response is handled. Forth, any post processing is performed. And finally,
                        logging is performed. Below is an outline of the flow.</para>
                    <para>TODO: Below is no longer true. Rewrite based on removal of unparsed data
                        interface.</para>
                    <orderedlist>
                        <listitem>
                            <para>Raw connection HTTP data is received by the server plugin and
                                passed to the engine.</para>
                        </listitem>
                        <listitem>
                            <para>[Need to add connection context here. Events could be: conn open,
                                conn data (inbound/outbound), conn close. Configuration options
                                include which protocol parser to use, default parser configuration,
                                whether to decrypt SSL, private keys for decryption, etc.]</para>
                        </listitem>
                        <listitem>
                            <para>If the connection is encrypted, SSL decryption takes place. This
                                step is optional and will largely depend on how the plugin is
                                designed. For example, the Apache plugin will always send decrypted
                                data.</para>
                        </listitem>
                        <listitem>
                            <para>The engine parses the data as a stream, buffering if configured to
                                do so.</para>
                        </listitem>
                        <listitem>
                            <para>The parser notifies the engine of various events (request headers
                                available, request body, etc.)</para>
                        </listitem>
                        <listitem>
                            <para>Any hooks associated with events are executed.</para>
                        </listitem>
                        <listitem>
                            <para>Once enough data is available, the configuration context selection
                                process is started configuration context function until one returns
                                that it wants to be enabled.</para>
                            <orderedlist>
                                <listitem>
                                    <para>At this point all modules registered in the chosen context
                                        will have their "context activated" functions executed,
                                        allowing them to be prepared for executing in the
                                        context.</para>
                                </listitem>
                            </orderedlist>
                        </listitem>
                        <listitem>
                            <para>Further events occur and associated hooks are executed, but now
                                with the chosen configuration context instead of the global
                                context.</para>
                        </listitem>
                    </orderedlist>
                </section>
            </section>
        </section>
    </section>
    <section>
        <title>Hooks</title>
        <para>TODO: Add description of each hook</para>
    </section>
    <section>
        <title>Modules</title>
        <para>Modules make up the majority of executed code in IronBee. Most features are built
            using modules. There are three primary reasons for this. First, it makes the code more
            readable and each feature more self contained. Second, it allows only features in use to
            be loaded into the executable. And last, since modules are shared libraries, it makes
            for easier upgrades as the engine only needs to unload the old code and reload the
            new.</para>
            <para>Modules have three essential duties. A module must export a known symbol so that
                it can be loaded. A set of configuration parameters may be set. And common module
                functions must be registered which will be called at various initialization and
                cleanup points. With Lua, however, this is much more simplified than in C.</para>
            <para>Exporting a symbol is quite language specific and will not be discussed
                here.</para>
            <para>Any number of configuration parameters are registered with the engine and their
                storage locations are then mapped by the engine both globally to the module as well
                as into each configuration context. As of this writing, there are two types of
                configuration parameters, numeric and string. Along with configuration parameter
                definitions can be defined default values.</para>
            <para>The eventual goal of a module is to register functions to be called by the engine.
            This is done by registering callback functions to be called with hooks. Hooks allow
            executing at defined points in the connection/transaction lifecycle, which is documented
            with the state machine in the API documentation.</para>
            <para>TODO: Need more on what a basic module will look like without going into language
                details.</para>
    </section>
    <section>
        <title>Writing Modules in C</title>
        <para>TODO: Some general description on why one would want to do this.</para>
        <section>
            <title>Anatomy of a C Module</title>
            <para>A C module is built into a shared library. The shared library exposes a known
                structure (see <xref linkend="ex.module-struct-definition"/>) that IronBee uses to load the module.</para>
            <example xml:id="ex.module-struct-definition">
                <title>IronBee Module Structure</title>
                <programlisting><xi:include href="extending-ironbee/module-struct-definition.txt" parse="text"/></programlisting>
            </example>
            <para>A module must define and initialize this structure to be loadable in IronBee. This
                is done by defining a few functions and making a few macro calls. A minimal module
                example is given in <xref linkend="ex.minimal-module"/>.</para>
            <example xml:id="ex.minimal-module">
                <title>Minimal Module</title>
                <programlisting><xi:include href="extending-ironbee/minimal-module.txt" parse="text"/></programlisting>
            </example>
            <para><xref linkend="ex.minimal-module"/> shows a very minimalistic module that does
                nothing but log when the module loads and unloads. The module includes some standard
                IronBee headers, declares itself a module and defines two functions. The module
                structure is then initialized with these functions assigned to the
                    <literal>fn_init</literal> and <literal>fn_fini</literal> fields. This results
                in the <literal>exmin_init</literal> and <literal>exmin_fini</literal> functions
                being called when the module is loaded and unloaded, respectfully. Of course much
                more can be done with a module.</para>
            <para>TODO: Describe what other things a module can do.</para>            
        </section>
        <section>
            <title>A Simple C Module Example</title>
            <para>TODO: This example is outdated and needs to be updated/replaced.</para>
            <para>To better illustrate writing a C module we need a simple task to accomplish. Here
                we will define a minimalistic signature language. To keep things simple, the module
                will stick to IronBee built-in features and ignore any performance concerns. The
                module will simply allow a user to add signature to IronBee. In this case a
                signature is defined as performing a PCRE based regular expression on a given data
                field and triggering an event if there is a match.</para>
            <para>To accomplish this task, we need to write a module that does the following:<itemizedlist>
                    <listitem>
                        <para>Allow writing a signature within the configuration file that allows
                            specifying when it should execute, what field it should match against, a
                            regular expression and an event message that should be triggered on
                            match.</para>
                    </listitem>
                    <listitem>
                        <para>Parse the signature into its various components.</para>
                    </listitem>
                    <listitem>
                        <para>Compile the PCRE and store the signature for later execution.</para>
                    </listitem>
                    <listitem>
                        <para>At runtime, execute the signatures at the specified time.</para>
                    </listitem>
                    <listitem>
                        <para>If a signature matches, generate an event.</para>
                    </listitem>
                </itemizedlist></para>
            <para>The module begins the same as in <xref linkend="ex.minimal-module"/>, but with
                some additional type definitions which we will use to store our signatures.</para>
            <example>
                <title>Signature Module Setup</title>
                <programlisting><xi:include parse="text" href="extending-ironbee/pocsig-setup.txt"/></programlisting>
            </example>
            <section>
                <title>Configuration</title>
                <para>Modules control their own configuration structure. Normally a module will use
                    a simple C structure which it can reference directly. However, a module may also
                    expose some or all of its configuration. Any exposed parameters can then be
                    accessed by other modules and/or through the configuration language. In addition
                    to exposing configuration parameters a module can register and expose new
                    configuration directives for use in the configuration language.</para>
                <para>In this example we will need to track multiple lists of signatures (one for
                    each point of execution) and a handle to the PCRE pattern matcher. While these
                    will not be exposed, we will expose a numeric parameter to toggle tracing
                    signature execution. The configuration is defined and instantiated in a C
                    structure shown in <xref linkend="ex.config-structure"/>.</para>
                <example xml:id="ex.config-structure">
                    <title>Configuration Structure</title>
                    <programlisting><xi:include parse="text" href="extending-ironbee/pocsig-config.txt"/></programlisting>
                </example>
                <para>We will then define a configuration directive to control tracing as well as
                    signature directives for each phase of execution. Note that multiple signature
                    directives are only used to simplify the example so that we do not have to write
                    rule parsing code. The functions defined in <xref
                        linkend="ex.pocsig-dirhandlers"/> are used to handle the configuration
                    directives, which we will define later on.</para>
                <para>The <literal>pocsig_dir_trace</literal> function is a simple single parameter
                    directive handler which parses the parameter for a "On" or "Off" value and sets
                    a numeric parameter value in the configuration context. We will see how this
                    parameter is exposed later on. The <literal>pocsig_dir_signature</literal>
                    function is a directive handler that can handle an arbitrary number of
                    parameters. Note that much of this function is described later on with pattern
                    matchers.</para>
                <example xml:id="ex.pocsig-dirhandlers">
                    <title>Configuration Directive Handlers</title>
                    <programlisting><xi:include parse="text" href="extending-ironbee/pocsig-dirhandlers.txt"/></programlisting>
                </example>
                <para>Any configuration parameters and directives must be registered with the
                    engine. This is accomplished through two mapping structures as shown in <xref
                        linkend="ex.pocsig-regconfig"/>. The exposed configuration parameter is
                    named, typically modulename.name, and the engine told it type, offset, length
                    and default value.  This is wrapped into a macro to make this much easier. The
                    configuration directives are registered in a similar fashion and mapped to
                    handler functions.</para>
                <example xml:id="ex.pocsig-regconfig">
                    <title>Registering the Configuration</title>
                    <programlisting><xi:include parse="text" href="extending-ironbee/pocsig-regconfig.txt"/></programlisting>
                </example>
            </section>
            <section>
                <title>Pattern Matchers</title>
                <para>Pattern matchers are defined through the matcher provider interface. These
                    matchers are typically loaded via modules. In case of the PCRE matcher, it is
                    loaded through the pcre module, which must be loaded for our example module to
                    work. A matcher provider exposes a common interface for calling any pattern
                    matchers registered with the engine.</para>
                <para>In <xref linkend="ex.pocsig-dirhandlers"/>
                    <literal>ib_matcher_create</literal> is used to fetch the PCRE pattern matcher.
                    This matcher is used here to compile the patterns with ib_matcher_compile. The
                    matcher is stored in the configuration context for later use in executing the
                    signatures. The compiled pattern is stored in the signature structure which is
                    added to a list for later execution.</para>
            </section>
            <section>
                <title>Hooks</title>
                <para>Up until now, we have been dealing with configuration time processing. In
                    order to handle processing at runtime, we have to define a handler and register
                    this handler to be executed at defined points. Since all signatures are executed
                    in the same fashion, we can define a single handler and register it to be
                    executed multiple times.</para>
                <example xml:id="ex.pocsig-hooks">
                    <title>Runtime Hook Handlers</title>
                    <programlisting><xi:include parse="text" href="extending-ironbee/pocsig-hooks.txt"/></programlisting>
                </example>
                <para><xref linkend="ex.pocsig-hooks"/> defines a handler for executing our
                    signatures at runtime. In order to use this handler with each phase, we will
                    pass the phase number to the handler. Other than some casting trickery to pass
                    the phase number, the function is fairly straight forward. It loops through a
                    phase list, fetches the data field it will match against, matches the
                    pre-compiled pattern against the field and then logs an event if there is a
                    match.</para>
                <para>All that is left in the module is to register the signature handler to be
                    executed in the various phases. <xref linkend="ex.pocsig-module"/> shows the
                    finial module functions and registration required for this. Normally
                    configuration data is exposed publicly where it is given a default value. Since
                    some of our configuration is not exposed, we  need to initialize the data
                    ourselves. This is done though the module initialization function,
                        <literal>pocsig_init</literal>. The context initialization function,
                        <literal>pocsig_context_init</literal>, is called for each configuration
                    context that this module is configured. This is where we register our handler
                    with the engine hooks and define the phase numbers that are passed to the
                    handler. Finally, the module structure is initialized to point to the various
                    configuration mapping structures and module initialization functions.</para>
                <example xml:id="ex.pocsig-module">
                    <title>Module Functions and Registration</title>
                    <programlisting><xi:include parse="text" href="extending-ironbee/pocsig-module.txt"/></programlisting>
                </example>
            </section>
            <section>
                <title>Events</title>
                <para>TODO</para>
            </section>
        </section>
    </section>
    <section>
        <title>Writing Modules in Lua</title>
        <para>Lua modules are designed to be much easier to develop than a C equivalent. A Lua
            IronBee module is built like any other Lua module. Really all you need to do is to
            implement handlers which are registered to execute when an event is triggered.</para>
        <programlisting><xi:include parse="text" href="extending-ironbee/lua-example.txt"/></programlisting>
    </section>
</chapter>
